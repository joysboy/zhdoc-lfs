<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-scripts-udev">
  <?dbhtml filename="udev.html"?>
<!--E
  <title>Device and Module Handling on an LFS System</title>
-->
  <title>LFS 系统的设备和模块处理</title>

  <indexterm zone="ch-scripts-udev">
    <primary sortas="a-Udev">Udev</primary>
    <secondary>usage</secondary>
  </indexterm>

<!--E
  <para>In <xref linkend="chapter-building-system"/>, we installed the Udev
  package. Before we go into the details regarding how this works,
  a brief history of previous methods of handling devices is in
  order.</para>
-->
  <para>在<xref linkend="chapter-building-system"/>里，我们安装了 Udev 软件包，在开始深入讨论它如何工作之前，我们先简要回顾一下以前处理设备的方法。</para>

<!--E
  <para>Linux systems in general traditionally use a static device creation
  method, whereby a great many device nodes are created under <filename
  class="directory">/dev</filename> (sometimes literally thousands of nodes),
  regardless of whether the corresponding hardware devices actually exist. This
  is typically done via a <command>MAKEDEV</command> script, which contains a
  number of calls to the <command>mknod</command> program with the relevant
  major and minor device numbers for every possible device that might exist in
  the world.</para>
-->
  <para>传统上一般 Linux 系统使用创建静态设备的方法，因此在 <filename  class="directory">/dev</filename> 目录下创建了大量的设备节点（有时会有数千个节点），而不管对应的硬件设备实际上是否存在。这通常是由 <command>MAKEDEV</command> 脚本完成的，这个脚本包含许多调用 <command>mknod</command> 程序的命令，为这个世界上可能存在的每个设备创建相应的主设备号和次设备号。</para>

<!--E
  <para>Using the Udev method, only those devices which are detected by the
  kernel get device nodes created for them. Because these device nodes will be
  created each time the system boots, they will be stored on a <systemitem
  class="filesystem">tmpfs</systemitem> file system (a virtual file system that
  resides entirely in system memory). Device nodes do not require much space, so
  the memory that is used is negligible.</para>
-->
  <para>而使用 Udev 方式的时候，只有被内核检测到的设备才为其创建设备节点。因为每次系统启动的时候都要重新创建这些设备节点，所以它们被存储在 <systemitem class="filesystem">tmpfs</systemitem> 文件系统（一种完全存在于内存里，不占用任何磁盘空间的文件系统）上，设备节点不需要很多磁盘空间，所占用的内存可以忽略不计。</para>

  <sect2>
<!--E
    <title>History</title>
-->
    <title>历史</title>

<!--E
    <para>In February 2000, a new filesystem called <systemitem
    class="filesystem">devfs</systemitem> was merged into the 2.3.46 kernel
    and was made available during the 2.4 series of stable kernels. Although
    it was present in the kernel source itself, this method of creating devices
    dynamically never received overwhelming support from the core kernel
    developers.</para>
-->
    <para>2000 年 2 月的时候，2.3.46 版本的内核引入了一种称为 <systemitem class="filesystem">devfs</systemitem> 的文件系统，在 2.4 系列稳定版本的内核中都是可用的。尽管它存在于内核源代码中，但这种动态创建设备的方法却从未得到核心内核开发者们的全力支持。</para>

<!--E
    <para>The main problem with the approach adopted by <systemitem
    class="filesystem">devfs</systemitem> was the way it handled device
    detection, creation, and naming. The latter issue, that of device node
    naming, was perhaps the most critical. It is generally accepted that if
    device names are allowed to be configurable, then the device naming policy
    should be up to a system administrator, not imposed on them by any
    particular developer(s). The <systemitem
    class="filesystem">devfs</systemitem> file system also suffers from race
    conditions that are inherent in its design and cannot be fixed without a
    substantial revision to the kernel. It was marked as deprecated for a long
    period &ndash; due to a lack of maintenance &ndash; and was finally removed
    from the kernel in June, 2006.</para>
-->
    <para><systemitem class="filesystem">devfs</systemitem> 存在的主要的问题是它处理设备检测、创建和命名的方式，其中设备节点的命名可能是最严重的问题。一般可接受的方式是，如果设备名是可配置的，那么设备命名策略应该由系统管理员决定，而不是由某些开发者强制规定。<systemitem class="filesystem">devfs</systemitem> 文件系统还存在竞争条件（race conditions）的问题，这是它天生的设计缺陷，不对内核做彻底的修改就无法修正这个问题。因为长久以来它都被标记为不推荐的（deprecated），并且由于缺乏维护，最终在2006 年 6 月 从内核中移除。</para>

<!--E
    <para>With the development of the unstable 2.5 kernel tree, later released
    as the 2.6 series of stable kernels, a new virtual filesystem called
    <systemitem class="filesystem">sysfs</systemitem> came to be. The job of
    <systemitem class="filesystem">sysfs</systemitem> is to export a view of
    the system's hardware configuration to userspace processes. With this
    userspace-visible representation, the possibility of seeing a userspace
    replacement for <systemitem class="filesystem">devfs</systemitem> became
    much more realistic.</para>
-->
    <para>随着非稳定的 2.5 内核树的开发，即后来发布的 2.6 系列稳定版本内核，一种被称为 <systemitem class="filesystem">sysfs</systemitem> 的新虚拟文件系统诞生了。<systemitem class="filesystem">sysfs</systemitem> 的工作是把系统的硬件配置视图导出给用户空间的进程。由于有了这个用户空间可见的表示，代替 <systemitem class="filesystem">devfs</systemitem> 方案的时机就成熟了。</para>
  </sect2>

  <sect2>
<!--E
    <title>Udev Implementation</title>
-->
    <title>Udev 实现</title>

    <sect3>
<!--E
      <title>Sysfs</title>
-->
      <title>Sysfs 文件系统</title>

<!--E
      <para>The <systemitem class="filesystem">sysfs</systemitem> filesystem was
      mentioned briefly above. One may wonder how <systemitem
      class="filesystem">sysfs</systemitem> knows about the devices present on
      a system and what device numbers should be used for them. Drivers that
      have been compiled into the kernel directly register their objects with
      <systemitem class="filesystem">sysfs</systemitem> as they are detected by
      the kernel. For drivers compiled as modules, this registration will happen
      when the module is loaded. Once the <systemitem
      class="filesystem">sysfs</systemitem> filesystem is mounted (on <filename
      class="directory">/sys</filename>), data which the built-in drivers
      registered with <systemitem class="filesystem">sysfs</systemitem> are
      available to userspace processes and to <command>udevd</command> for device
      node creation.</para>
-->
      <para>上面简单的提到了 <systemitem class="filesystem">sysfs</systemitem> 文件系统，您可能想知道 <systemitem class="filesystem">sysfs</systemitem> 是怎么认出系统中存在的设备以及应该使用什么设备号。对于已经编入内核的驱动程序，当被内核检测到的时候，会直接在 <systemitem class="filesystem">sysfs</systemitem> 中注册其对象；对于编译成模块的驱动程序，当模块载入的时候才会这样做。一旦挂载了 <systemitem class="filesystem">sysfs</systemitem> 文件系统（挂载到 <filename   class="directory">/sys</filename>），内建的驱动程序在 <systemitem class="filesystem">sysfs</systemitem> 注册的数据就可以被用户空间的进程使用，并提供给 <command>udevd</command> 以创建设备节点。 </para>

    </sect3>

    <sect3>
<!--E
      <title>Udev Bootscript</title>
-->
      <title>Udev 启动脚本</title>

<!--E
      <para>The <command>S10udev</command> initscript takes care of creating
      device nodes when Linux is booted. The script unsets the uevent handler
      from the default of <command>/sbin/hotplug</command>.  This is done
      because the kernel no longer needs to call out to an external binary.
      Instead <command>udevd</command> will listen on a netlink socket for
      uevents that the kernel raises. Next, the bootscript copies any static
      device nodes that exist in <filename
      class="directory">/lib/udev/devices</filename> to <filename
      class="directory">/dev</filename>. This is necessary because some devices,
      directories, and symlinks are needed before the dynamic device handling
      processes are available during the early stages of booting a system, or
      are required by <command>udevd</command> itself.  Creating static device
      nodes in <filename class="directory">/lib/udev/devices</filename> also
      provides an easy workaround for devices that are not supported by the
      dynamic device handling infrastructure. The bootscript then starts the
      Udev daemon, <command>udevd</command>, which will act on any uevents it
      receives. Finally, the bootscript forces the kernel to replay uevents for
      any devices that have already been registered and then waits for
      <command>udevd</command> to handle them.</para>
-->
      <para><command>S10udev</command> 初始化脚本负责在 Linux 启动的时候创建设备节点。该脚本首先将 <command>/sbin/hotplug</command> 注册为热插拔事件处理程序。这样做是因为内核不再需要运行一个外部的二进制程序，相反 <command>udevd</command> 将会为内核传送的 uevents 信号听从 socket 网络链接。然后，这个启动脚本复制 <filename class="directory">/lib/udev/devices</filename> 里面的静态设备节点号到 <filename  class="directory">/dev</filename>里面。 这是必要的，因为动态设备在处理系统启动早期的可用程序，或者是 <command>udevd</command> 自身需要的程序之前需要一些设备、目录和符号链接。在 <filename class="directory">/lib/udev/devices</filename> 里面创建静态的的设备节点也为设备创建了一个简单的工作区，而这些设备不被动态设备支持。之后启动脚本开启 Udev 守护进程 <command>udevd</command>。守护进程将会对它接收到的任何一个 uevent 有用。最终，启动脚本强制内核对任意一个已经注册的设备重试 uevent，并等待 <command>udevd</command> 来解决它们。</para>

    </sect3>

    <sect3>
<!--E
      <title>Device Node Creation</title>
-->
      <title>设备节点创建</title>

<!--
      <para>To obtain the right major and minor number for a device, Udev relies
      on the information provided by <systemitem
      class="filesystem">sysfs</systemitem> in <filename
      class="directory">/sys</filename>.  For example,
      <filename>/sys/class/tty/vcs/dev</filename> contains the string
      <quote>7:0</quote>. This string is used by <command>udevd</command>
      to create a device node with major number <emphasis>7</emphasis> and minor
      <emphasis>0</emphasis>. The names and permissions of the nodes created
      under the <filename class="directory">/dev</filename> directory are
      determined by rules specified in the files within the <filename
      class="directory">/etc/udev/rules.d/</filename> directory. These are
      numbered in a similar fashion to the LFS-Bootscripts package. If
      <command>udevd</command> can't find a rule for the device it is creating,
      it will default permissions to <emphasis>660</emphasis> and ownership to
      <emphasis>root:root</emphasis>. Documentation on the syntax of the Udev
      rules configuration files are available in
      <filename>/usr/share/doc/udev-&udev-version;/index.html</filename></para>
-->
      <para>为了得到正确的主次设备号，Udev 依赖于 <filename class="directory">/sys</filename>目录下的<systemitem class="filesystem">sysfs</systemitem> 提供的信息。例如，<filename>/sys/class/tty/vcs/dev</filename> 包含字符串 <quote>7:0</quote>。这个字符串是被 <command>udevd</command> 用来创建主设备号是<emphasis>7</emphasis>、次设备号是 <emphasis>0</emphasis> 的设备节点。在 <filename class="directory">/dev</filename> 目录下创建的设备节点的名字和权限由 <filename class="directory">/etc/udev/rules.d/</filename> 目录下相应的规则决定。这些以类似的形式包含在 LFS-Bootscripts 包中。如果 <command>udevd</command> 不能为它现在创建的设备发现一个规则，它会默认把权限设置为 <emphasis>660</emphasis>，属主设置为 <emphasis>root:root</emphasis>。Udev 规则语法的文档可以查看 <filename>/usr/share/doc/udev-&udev-version;/index.html</filename>。</para>

    </sect3>

    <sect3>
<!--E
      <title>Module Loading</title>
-->
      <title> 模块加载 </title>

<!--E
      <para>Device drivers compiled as modules may have aliases built into them.
      Aliases are visible in the output of the <command>modinfo</command>
      program and are usually related to the bus-specific identifiers of devices
      supported by a module. For example, the <emphasis>snd-fm801</emphasis>
      driver supports PCI devices with vendor ID 0x1319 and device ID 0x0801,
      and has an alias of <quote>pci:v00001319d00000801sv*sd*bc04sc01i*</quote>.
      For most devices, the bus driver exports the alias of the driver that
      would handle the device via <systemitem
      class="filesystem">sysfs</systemitem>. E.g., the
      <filename>/sys/bus/pci/devices/0000:00:0d.0/modalias</filename> file
      might contain the string
      <quote>pci:v00001319d00000801sv00001319sd00001319bc04sc01i00</quote>.
      The default rules provided with Udev will cause <command>udevd</command>
      to call out to <command>/sbin/modprobe</command> with the contents of the
      <envar>MODALIAS</envar> uevent environment variable (which should be the
      same as the contents of the <filename>modalias</filename> file in sysfs),
      thus loading all modules whose aliases match this string after wildcard
      expansion.</para>
-->
      <para>被编译成模块的设备驱动可能有编译进去的别名。别名可以通过 <command>modinfo</command> 程序的输出来查看，通常与设备总线特有的标识有关（模块要支持）。例如，<emphasis>snd-fm801</emphasis> 驱动支持 PCI 设备，通过生产厂商 ID 0x1319 和设备 ID 0x0801，有一个别名<quote>pci:v00001319d00000801sv*sd*bc04sc01i*</quote>。对于大多数的设备，总线驱动通过 <systemitem class="filesystem">sysfs</systemitem> 导出可能会处理的设备驱动的别名。例如 <filename>/sys/bus/pci/devices/0000:00:0d.0/modalias</filename> 文件可能包含字符串<quote>pci:v00001319d00000801sv00001319sd00001319bc04sc01i00</quote>。为 Udev 提供的默认规则会导致 <command>udevd</command> 调用 <command>/sbin/modprobe</command> 处理热插拔事件环境变量 <envar>MODALIAS</envar> 的内容（应该与 sysfs 中的 <filename>modalias</filename> 文件的内容一样）。因此在通配符扩展之后，加载所有的别名匹配这个字符串的模块。</para>

<!--E
      <para>In this example, this means that, in addition to
      <emphasis>snd-fm801</emphasis>, the obsolete (and unwanted)
      <emphasis>forte</emphasis> driver will be loaded if it is
      available. See below for ways in which the loading of unwanted drivers can
      be prevented.</para>
-->
      <para>在这个例子中，除了 <emphasis>snd-fm801</emphasis>，荒废的（不想要的）<emphasis>forte</emphasis> 驱动会被加载（如果它可用）。查看下面的方法来避免加载不想要的模块。</para>

<!--E
      <para>The kernel itself is also able to load modules for network
      protocols, filesystems and NLS support on demand.</para>
-->
      <para>内核自身能在后台加载有关网络协议、文件系统和 NLS（国际语言支持）支持的模块。</para>

    </sect3>

    <sect3>
<!--E
      <title>Handling Hotpluggable/Dynamic Devices</title>
-->
      <title>处理可热插拔/动态设备</title>

<!--E
      <para>When you plug in a device, such as a Universal Serial Bus (USB) MP3
      player, the kernel recognizes that the device is now connected and
      generates a uevent. This uevent is then handled by
      <command>udevd</command> as described above.</para>
-->
      <para>当您插入一个设备，例如一个 USB 接口的 MP3 播放器，内核会检测到设备连接，并产生一个热插拔事件。然后这个热插拔事件会被上面提到的 <command>udevd</command> 处理。</para>
    </sect3>

  </sect2>

  <sect2>
<!--E
    <title>Problems with Loading Modules and Creating Devices</title>
-->
    <title>创建设备的问题</title>

<!--E
    <para>There are a few possible problems when it comes to automatically
    creating device nodes.</para>
-->
    <para>自动创建设备节点的时候，存在一些已知的问题：</para>

    <sect3>
<!--E
      <title>A kernel module is not loaded automatically</title>
-->
      <title>内核模块没有自动加载</title>

<!--E
      <para>Udev will only load a module if it has a bus-specific alias and the
      bus driver properly exports the necessary aliases to <systemitem
      class="filesystem">sysfs</systemitem>. In other cases, one should
      arrange module loading by other means. With Linux-&linux-version;, Udev is
      known to load properly-written drivers for INPUT, IDE, PCI, USB, SCSI,
      SERIO and FireWire devices.</para>
-->
      <para>如果有一个总线特有的别名，并且总线驱动器导出必需的别名到 <systemitem class="filesystem">sysfs</systemitem>，那么 Udev 将只会加载一个模块。在其他情况下，需要安排其它的模块加载方式。在 Linux-&linux-version; 中，Udev 为 INPUT、IDE、PCI、USB、SCSI、SERIO 和 FireWire 设备加载适当的驱动。</para>

<!--E
      <para>To determine if the device driver you require has the necessary
      support for Udev, run <command>modinfo</command> with the module name as
      the argument.  Now try locating the device directory under
      <filename class="directory">/sys/bus</filename> and check whether there is
      a <filename>modalias</filename> file there.</para>
-->
      <para>为了确定你请求的设备驱动 Udev 是否支持，可以以模块的名字为参数运行 <command>modinfo</command>。现在把设备目录设置到到 <filename class="directory">/sys/bus</filename> ，检测那里是否有一个 <filename>modalias</filename> 文件。</para>

<!--E
      <para>If the <filename>modalias</filename> file exists in <systemitem
      class="filesystem">sysfs</systemitem>, the driver supports the device and
      can talk to it directly, but doesn't have the alias, it is a bug in the
      driver. Load the driver without the help from Udev and expect the issue
      to be fixed later.</para>
-->
      <para>如果 <filename>modalias</filename> 文件存在于 <systemitem class="filesystem">sysfs</systemitem> 中，驱动程序支持设备并且可以直接通信，但是没有别名，这是驱动中的一个 bug。不要利用 Udev 的帮助加载驱动，希望在以后这个问题会被修正。</para>

<!--E
      <para>If there is no <filename>modalias</filename> file in the relevant
      directory under <filename class="directory">/sys/bus</filename>, this
      means that the kernel developers have not yet added modalias support to
      this bus type. With Linux-&linux-version;, this is the case with ISA
      busses. Expect this issue to be fixed in later kernel versions.</para>
-->
      <para>如果 <filename class="directory">/sys/bus</filename> 的相应目录内没有 <filename>modalias</filename> 文件，这就意为着内核开发者还没有添加对这种总线类型的模块别名的支持。在 Linux-&linux-version; 中，ISA 总线就是这种情况。希望在下一个内核版本中会修正这个问题。</para>

<!--E
      <para>Udev is not intended to load <quote>wrapper</quote> drivers such as
      <emphasis>snd-pcm-oss</emphasis> and non-hardware drivers such as
      <emphasis>loop</emphasis> at all.</para>
-->
      <para>Udev 根本不会加载像 <emphasis>snd-pcm-oss</emphasis> 的<quote>包装</quote>驱动和像 <emphasis>loop</emphasis> 的非硬件驱动。</para>

    </sect3>

    <sect3>
<!--E 
      <title>A kernel module is not loaded automatically, and Udev is not
      intended to load it</title>
-->
      <title>内核模块没有自动加载，并且 Udev 也不加载</title>

<!--E
      <para>If the <quote>wrapper</quote> module only enhances the functionality
      provided by some other module (e.g., <emphasis>snd-pcm-oss</emphasis>
      enhances the functionality of <emphasis>snd-pcm</emphasis> by making the
      sound cards available to OSS applications), configure
      <command>modprobe</command> to load the wrapper after Udev loads the
      wrapped module. To do this, add an <quote>install</quote> line in
      <filename>/etc/modprobe.conf</filename>. For example:</para>
-->
      <para>如果<quote>包装</quote>模块只是增强其它模块提供的功能（例如 <emphasis>snd-pcm-oss</emphasis> 增强了 <emphasis>snd-pcm</emphasis>，它使声卡对于 OSS 程序可用），可以配置 <command>modprobe</command> 使其在加载了相应模块后加载其包装模块。着可以通过在<filename>/etc/modprobe.conf</filename> 中添加一行 <quote>install</quote> 来实现，例如：</para>

<screen role="nodump"><literal>install snd-pcm /sbin/modprobe -i snd-pcm ; \
    /sbin/modprobe snd-pcm-oss ; true</literal></screen>
<!--E
      <para>If the module in question is not a wrapper and is useful by itself,
      configure the <command>S05modules</command> bootscript to load this
      module on system boot. To do this, add the module name to the
      <filename>/etc/sysconfig/modules</filename> file on a separate line.
      This works for wrapper modules too, but is suboptimal in that case.</para>
-->
      <para>如果模块不是一个包装，而是对自己本身有用，配置 <command>S05modules</command> 启动脚本使其在系统启动的时候加载。要完成此任务，可以在 <filename>/etc/sysconfig/modules</filename> 文件的相应行上添加模块的名字。包装模块也可以按照这种方式处理，但并不是最适合的。</para>

    </sect3>

    <sect3>
<!--E
      <title>Udev loads some unwanted module</title>
-->
      <title>Udev 加载了不需要的模块</title>

 <!--E
      <para>Either don't build the module, or blacklist it in
      <filename>/etc/modprobe.conf</filename> file as done with the
      <emphasis>forte</emphasis> module in the example below:</para>
-->
      <para>在下面例子中，对于 <emphasis>forte</emphasis> 模块，可以不编译它或者把它列入文件 <filename>/etc/modprobe.conf</filename> 的黑名单里。</para>

<screen role="nodump"><literal>blacklist forte</literal></screen>

<!--E
      <para>Blacklisted modules can still be loaded manually with the
      explicit <command>modprobe</command> command.</para>
-->
      <para>列入黑名单的模块仍然能够通过 <command>modprobe</command> 命令手工加载。</para>

    </sect3>

    <sect3>
<!--E
      <title>Udev creates a device incorrectly, or makes a wrong symlink</title>
-->
      <title>Udev 错误地创建了设备或创建了错误的符号链接</title>

<!--E
      <para>This usually happens if a rule unexpectedly matches a device. For
      example, a poorly-writen rule can match both a SCSI disk (as desired)
      and the corresponding SCSI generic device (incorrectly) by vendor.
      Find the offending rule and make it more specific, with the help of the
      <command>udevadm info</command> command.</para>
-->
      <para>如果规则匹配的不是预想的设备，那么这种情况就会经常发生。例如，一个写的很糟糕的规则通过计算机提供商匹配到一个 SCSI 硬盘（期望的）和一个一般的 SCSI 设备（错误的）。找出这些不合格的规则，在命令 <command>udevadm info</command> 的帮助下更正它们。</para>

    </sect3>

    <sect3>
<!--E
      <title>Udev rule works unreliably</title>
-->
      <title>Udev 规则不可靠</title>

<!--E
      <para>This may be another manifestation of the previous problem. If not,
      and your rule uses <systemitem class="filesystem">sysfs</systemitem>
      attributes, it may be a kernel timing issue, to be fixed in later kernels.
      For now, you can work around it by creating a rule that waits for the used
      <systemitem class="filesystem">sysfs</systemitem> attribute and appending
      it to the <filename>/etc/udev/rules.d/10-wait_for_sysfs.rules</filename>
      file (create this file if it does not exist). Please notify the LFS
      Development list if you do so and it helps.</para>
-->
      <para>这或许是前面问题的一个表现。如果不是，并且你的规则使用 <systemitem class="filesystem">sysfs</systemitem> 属性，那么这可能是一个将在下一个版本的内核中被修正的内核计时问题。现在，你可以通过创建一个等待使用 <systemitem class="filesystem">sysfs</systemitem> 属性的规则，把它添加到 <filename>/etc/udev/rules.d/10-wait_for_sysfs.rules</filename> 文件中（如果这个文件不存在，请先创建它）。如果你做了，并且它是有效的，请通知LFS开发邮件列表。</para>

    </sect3>

    <sect3>
<!--E
      <title>Udev does not create a device</title>
-->
      <title>Udev 没有创建设备</title>

<!--E
      <para>Further text assumes that the driver is built statically into the
      kernel or already loaded as a module, and that you have already checked
      that Udev doesn't create a misnamed device.</para>
-->
      <para>后面的文本假设驱动已经被静态地编译进了内核或者是已经作为模块被加载，你已经确认了 Udev 没有创建错误的设备。</para>

<!--E
      <para>Udev has no information needed to create a device node if a kernel
      driver does not export its data to <systemitem
      class="filesystem">sysfs</systemitem>.
      This is most common with third party drivers from outside the kernel
      tree. Create a static device node in
      <filename>/lib/udev/devices</filename> with the appropriate major/minor
      numbers (see the file <filename>devices.txt</filename> inside the kernel
      documentation or the documentation provided by the third party driver
      vendor). The static device node will be copied to
      <filename class="directory">/dev</filename> by the
      <command>S10udev</command> bootscript.</para>
-->
      <para>如果内核驱动没有将其数据导出到 <systemitem class="filesystem">sysfs</systemitem>，Udev 就没有足够信息来创建设备节点。这个问题在内核源代码树之外的第三方驱动程序上尤为常见。用恰当的主/次设备号在 <filename>/lib/udev/devices</filename> 中创建一个静态的设备节点（参考内核文档里的 <filename>devices.txt</filename> 或者第三驱动厂商提供的文档）。静态的设备节点将被 <command>S10udev</command> 启动脚本拷贝到 <filename class="directory">/dev</filename> 目录中。</para>

    </sect3>

    <sect3>
<!--E
      <title>Device naming order changes randomly after rebooting</title>
-->
      <title>重启后设备名字顺序变化</title>

<!--E
      <para>This is due to the fact that Udev, by design, handles uevents and
      loads modules in parallel, and thus in an unpredictable order. This will
      never be <quote>fixed</quote>. You should not rely upon the kernel device
      names being stable. Instead, create your own rules that make symlinks with
      stable names based on some stable attributes of the device, such as a
      serial number or the output of various *_id utilities installed by Udev.
      See <xref linkend="ch-scripts-symlinks"/> and
      <xref linkend="ch-scripts-network"/> for examples.</para>
-->
      <para>这是由于 Udev 设计的问题，它以并行方式处理热插拔事件和加载模块，因此名字的顺序就会不可预测。这将不会被<quote>修正</quote>。不要期望内核设备的名字是稳定的，而是应当根据设备稳定的属性（比如，序列号或者 Udev 安装的各种 *_id 工具的输出）写自己的规则来创建符号链接。例子请参见<xref linkend="ch-scripts-symlinks"/>和<xref linkend="ch-scripts-network"/>。</para>

    </sect3>

  </sect2>

  <sect2>
<!--E
    <title>Useful Reading</title>
-->
    <title>有用的读物</title>

<!--E
    <para>Additional helpful documentation is available at the following
    sites:</para>
-->
    <para>一些有用的补充文档可以在下列网站得到：</para>
    <itemizedlist>

      <listitem>
        <para>A Userspace Implementation of <systemitem class="filesystem">devfs</systemitem>
        <ulink url="http://www.kroah.com/linux/talks/ols_2003_udev_paper/Reprint-Kroah-Hartman-OLS2003.pdf"/></para>
      </listitem>

      <listitem>
        <para>udev FAQ
        <ulink url="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev-FAQ"/></para>
      </listitem>

      <listitem>
        <para>The <systemitem class="filesystem">sysfs</systemitem> Filesystem
        <ulink url="http://www.kernel.org/pub/linux/kernel/people/mochel/doc/papers/ols-2005/mochel.pdf"/></para>
      </listitem>

    </itemizedlist>

  </sect2>

</sect1>
