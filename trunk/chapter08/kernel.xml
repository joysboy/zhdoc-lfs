<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-bootable-kernel" role="wrap">
  <?dbhtml filename="kernel.html"?>

  <sect1info condition="script">
    <productname>linux</productname>
    <productnumber>&linux-version;</productnumber>
    <address>&linux-url;</address>
  </sect1info>

  <title>Linux-&linux-version;</title>

  <indexterm zone="ch-bootable-kernel">
    <primary sortas="a-Linux">Linux</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Linux 内核软件包包含内核源代码及其头文件。</para>
    <!--E
         <para> The Linux package contains the Linux kernel. </para>
    -->

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&linux-ch8-sbu;</seg>
        <seg>&linux-ch8-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <!--E
         <title>Installation of the kernel</title>
    -->
    <title>安装 kernel</title>

    <para>编译内核包含几个步骤&mdash;配置、编译和安装。阅读内核源码树里的 <filename>README</filename> 文件可选择不同于本书的配置内核的其他方法。</para>

    <para>运行下面的命令准备编译：</para>

<screen><userinput remap="pre">make mrproper</userinput></screen>

    <para>这样可确保内核树绝对干净。内核开放团队推荐每次编译内核之前都运行这个命令。不要指望解压后的源码树都是干净的。</para>
    <!-- Support for compiling a keymap into the kernel is deliberately removed -->

    <para>配置内核通过一个菜单来驱动界面。BLFS 在 LFS 包之外有一些详细的有关内核配置要求的软件包，在 <ulink url="&blfs-root;view/svn/longindex.html#kernel-config-index"/>:</para>

<screen role="nodump"><userinput>make LANG=<replaceable>&lt;host_LANG_value&gt;</replaceable> LC_ALL= menuconfig</userinput></screen>

    <variablelist>
      <title>编译参数的含义：</title>

      <varlistentry>
        <term><parameter>LANG=&lt;host_LANG_value&gt; LC_ALL=</parameter></term>
        <listitem>
          <para>这建立了在主机上使用的本地设置。这需要一个适当的内核界面接口线来动用 UTF-8 的 linux 文本控制台。</para>

          <para>确保用你主机上变量 <envar>$LANG</envar> 的值来替换 <replaceable>&lt;host_LANG_value&gt;</replaceable>。如果未设置，你可以用主机上 <envar>$LC_ALL</envar> 或者 <envar>$LC_CTYPE</envar> 的值来替代它。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>在同样的情况下选择 <command>make oldconfig</command> 可能更合适。阅读 <filename>README</filename> 以获取更多信息。</para>

    <para>如果愿意，可以跳过内核配置，直接从主机系统（假定可用）复制内核配置文件 <filename>.config</filename>，解压到 <filename class="directory">linux-&linux-version;</filename> 目录下。然而，我们不推荐这种选择。通常探究所有配置菜单项并且从头创建内核配置更好。</para>

    <para>编译内核镜像和模块：</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>如果使用内核模块，可能需要 <filename>/etc/modprobe.conf</filename> 文件。有关模块和内核的配置信息可在 <xref linkend="ch-scripts-udev"/> 和 <filename class="directory">linux-&linux-version;/Documentation</filename> 目录中的内核文档中找到。同样，<filename>modprobe.conf(5)</filename> 可能也很重要。</para>

    <para>如果内核配置使用模块，安装它们：</para>

<screen><userinput remap="install">make modules_install</userinput></screen>

    <para>内核编译完成后，为完成安装还需要额外的步凑。一些文件需要拷贝副本到 <filename class="directory">/boot</filename> 目录。</para>

    <para>内核镜像的路径，根据平台的不同可能会改变。下面的命令假定架构在 x86 上：</para>

<screen><userinput remap="install">cp -v arch/x86/boot/bzImage /boot/lfskernel-&linux-version;</userinput></screen>

    <para><filename>System.map</filename> 是内核的一个符号文件。它映射每个内核 API 函数的入口，以及内核在运行中的数据结构地址。运行下面这个命令安装这个映射文件：</para>

<screen><userinput remap="install">cp -v System.map /boot/System.map-&linux-version;</userinput></screen>

    <para>内核配置文件 <filename>.config</filename> 产生于步凑 <command>make menuconfig</command>，包含所有被编译的内核配置选项。保留这个文件以备将来参考是个好主意:</para>

<screen><userinput remap="install">cp -v .config /boot/config-&linux-version;</userinput></screen>

    <para>安装Linux内核文档：</para>

<screen><userinput remap="install">install -d /usr/share/doc/linux-&linux-version;
cp -r Documentation/* /usr/share/doc/linux-&linux-version;</userinput></screen>

    <para>有一点重要提示，内核源码目录的所有者不是 <emphasis>root</emphasis>。只要是用 <emphasis>root</emphasis> (类似我们在 chroot 环境下做的）解压，无论他们在什么打包者的计算机上解压后的文件都有用户和组的 ID。对于其他安装包这通常不是问题因为源码树在安装后被移除了。但是，Linux 源码树通常保留很长时间。为此，无论包装者使用什么 ID，用户的 ID 仍然有可能被分配给机器上的某人。此人将拥有改写内核源码的权限。</para>

    <para>If the kernel source tree is going to be retained, run
    <command>chown -R 0:0</command> on the <filename
    class="directory">linux-&linux-version;</filename> directory to ensure
    all files are owned by user <emphasis>root</emphasis>.</para>

    <warning>
      <para>Some kernel documentation recommends creating a symlink from
      <filename class="symlink">/usr/src/linux</filename> pointing to the kernel
      source directory.  This is specific to kernels prior to the 2.6 series and
      <emphasis>must not</emphasis> be created on an LFS system as it can cause
      problems for packages you may wish to build once your base LFS system is
      complete.</para>
    </warning>

    <warning>
      <para>The headers in the system's
      <filename class="directory">include</filename> directory should
      <emphasis>always</emphasis> be the ones against which Glibc was compiled,
      that is, the sanitised headers from this Linux kernel tarball.
      Therefore, they should <emphasis>never</emphasis> be replaced by either
      the raw kernel headers or any other kernel sanitized headers.</para>
    </warning>

  </sect2>

  <sect2 id="contents-kernel" role="content">
    <title>Contents of Linux</title>

    <segmentedlist>
      <segtitle>Installed files</segtitle>

      <seglistitem>
        <seg>config-&linux-version;, lfskernel-&linux-version;, and
        System.map-&linux-version;</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="config">
        <term><filename>config-&linux-version;</filename></term>
        <listitem>
          <para>Contains all the configuration selections for the kernel</para>
          <indexterm zone="ch-bootable-kernel config">
            <primary sortas="e-/boot/config">/boot/config-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lfskernel">
        <term><filename>lfskernel-&linux-version;</filename></term>
        <listitem>
          <para>The engine of the Linux system. When turning on the computer,
          the kernel is the first part of the operating system that gets loaded.
          It detects and initializes all components of the computer's hardware,
          then makes these components available as a tree of files to the
          software and turns a single CPU into a multitasking machine capable
          of running scores of programs seemingly at the same time</para>
          <indexterm zone="ch-bootable-kernel lfskernel">
            <primary sortas="b-lfskernel">lfskernel-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="System.map">
        <term><filename>System.map-&linux-version;</filename></term>
        <listitem>
          <para>A list of addresses and symbols; it maps the entry points and
          addresses of all the functions and data structures in the
          kernel</para>
          <indexterm zone="ch-bootable-kernel System.map">
            <primary sortas="e-/boot/System.map">/boot/System.map-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
