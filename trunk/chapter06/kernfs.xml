<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-kernfs">
  <?dbhtml filename="kernfs.html"?>
<!--E
  <title>Preparing Virtual Kernel File Systems</title>
-->
  <title>挂载虚拟内核文件系统</title>
  <indexterm zone="ch-system-kernfs">
    <primary sortas="e-/dev/">/dev/*</primary>
  </indexterm>
<!--E
    <para>Various file systems exported by the kernel are used to communicate to
    and from the kernel itself. These file systems are virtual in that no disk
    space is used for them. The content of the file systems resides in
    memory.</para>
-->
    <para>虚拟内核文件系统（Virtual Kernel File Systems），是指那些是由内核产生但并不存在于硬盘上（存在于内存中）的文件系统，他们被用来与内核进行通信。</para>
<!--E
    <para>Begin by creating directories onto which the file systems will be
    mounted:</para>
-->
    <para>首先让我们为虚拟内核文件系统建立挂载目录：</para>
<screen><userinput>mkdir -pv $LFS/{dev,proc,sys}</userinput></screen>

  <sect2>
<!--E
    <title>Creating Initial Device Nodes</title>
-->
    <title>创建初始设备节点</title>

<!--E
    <para>When the kernel boots the system, it requires the presence of a few
    device nodes, in particular the <filename
    class="devicefile">console</filename> and <filename
    class="devicefile">null</filename> devices. The device nodes will be created
    on the hard disk so that they are available before <command>udevd</command>
    has been started, and additionally when Linux is started with
    <parameter>init=/bin/bash</parameter>. Create the devices by running the
    following commands:</para>
-->
    <para>内核在引导时，它要求某些设备节点必须存在，特别是 <filename class="devicefile">console</filename> 和 <filename class="devicefile">null</filename> 设备。这些设备节点必须创建在硬盘上才能使得内核在 <command>udevd</command> 尚未启动之前和 Linux 以 <parameter>init=/bin/bash</parameter> 启动时可以使用它们。使用下面的命令来创建这些节点：</para>

<screen><userinput>mknod -m 600 $LFS/dev/console c 5 1
mknod -m 666 $LFS/dev/null c 1 3</userinput></screen>

  </sect2>

  <sect2 id="ch-system-bindmount">
<!--E
    <title>Mounting and Populating /dev</title>
-->
    <title>挂载并填充 /dev 目录</title>

<!--E
      <para>The recommended method of populating the <filename
      class="directory">/dev</filename> directory with devices is to mount a
      virtual filesystem (such as <systemitem
      class="filesystem">tmpfs</systemitem>) on the <filename
      class="directory">/dev</filename> directory, and allow the devices to be
      created dynamically on that virtual filesystem as they are detected or
      accessed. This is generally done during the boot process by Udev. Since
      this new system does not yet have Udev and has not yet been booted, it is
      necessary to mount and populate <filename
      class="directory">/dev</filename> manually. This is accomplished by bind
      mounting the host system's <filename class="directory">/dev</filename>
      directory. A bind mount is a special type of mount that allows you to
      create a mirror of a directory or mount point to some other location. Use
      the following command to achieve this:</para>
-->
      <para>推荐的向 <filename class="directory">/dev</filename> 目录填充设备的方法是在 <filename class="directory">/dev</filename> 上挂载一个虚拟文件系统（比如 <systemitem class="filesystem">tmpfs</systemitem>），然后在设备被检测到或被访问到的时候（通常是在系统引导的过程中）动态创建设备节点。既然现在新的系统尚未被引导， 那么就有必要通过手工挂载和填充 <filename class="directory">/dev</filename> 目录。这可以通过绑定挂载宿主系统的 <filename class="directory">/dev</filename> 目录。绑定挂载是一种特殊的挂载方式，允许你创建一个目录或者是挂载点的镜像到其他的地方。可以使用下面的命令：</para>

<screen><userinput>mount -v --bind /dev $LFS/dev</userinput></screen>

  </sect2>

  <sect2 id="ch-system-kernfsmount">
<!--E
    <title>Mounting Virtual Kernel File Systems</title>
-->
    <title>挂载虚拟内核文件系统</title>
<!--E
      <para>Now mount the remaining virtual kernel filesystems:</para>
-->
      <para>现在挂载虚拟内核文件系统：</para>

<screen><userinput>mount -vt devpts devpts $LFS/dev/pts
mount -vt tmpfs shm $LFS/dev/shm
mount -vt proc proc $LFS/proc
mount -vt sysfs sysfs $LFS/sys</userinput></screen>

  </sect2>

</sect1>
