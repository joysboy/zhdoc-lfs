<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-aboutdebug">
  <?dbhtml filename="aboutdebug.html"?>

<!--E
  <title>About Debugging Symbols</title>
-->
  <title>关于调试符号</title>

<!--E
  <para>Most programs and libraries are, by default, compiled with
  debugging symbols included (with <command>gcc</command>'s
  <parameter>-g</parameter> option). This means that when debugging a
  program or library that was compiled with debugging information
  included, the debugger can provide not only memory addresses, but also
  the names of the routines and variables.</para>
-->
  <para>在默认的情况下，大多数程序和库都是带调试符号（使用  <command>gcc</command> 的 <parameter>-g</parameter> 选项）编译的。当调试一个带调试符号的程序时，调试器不仅能给出内存地址，还能给出函数和变量的名字。</para>

<!--E
  <para>However, the inclusion of these debugging symbols enlarges a
  program or library significantly. The following is an example of the
  amount of space these symbols occupy:</para>
-->
  <para>但是，这些调试符号明显地增大了程序和库。下面的例子列举了一些调试符号所占的内存大小：</para>

  <itemizedlist>
    <listitem>
<!--E
      <para>A <command>bash</command> binary with debugging symbols:
      1200 KB</para>
-->
      <para>带调试符号的动态 <command>bash</command> 二进制文件： 1200 KB</para>

    </listitem>
    <listitem>
<!--E
      <para>A <command>bash</command> binary without debugging symbols:
      480 KB</para>
-->
      <para>不带调试符号的动态 <command>bash</command> 二进制文件: 480 KB</para>

    </listitem>
    <listitem>
<!--E
      <para>Glibc and GCC files (<filename class="directory">/lib</filename>
      and <filename class="directory">/usr/lib</filename>) with debugging
      symbols: 87 MB</para>
-->
      <para>带调试符号的 Glibc 和 GCC 文件（位于 <filename class="directory">/lib</filename> 和 <filename class="directory">/usr/lib</filename> 目录）： 87 MB</para>

    </listitem>
    <listitem>
<!--E
      <para>Glibc and GCC files without debugging symbols: 16 MB</para>
-->
      <para>不带调试符号的 Glibc 和 GCC 文件： 16 MB</para>
    </listitem>
  </itemizedlist>

<!--E
  <para>Sizes may vary depending on which compiler and C library were used,
  but when comparing programs with and without debugging symbols, the
  difference will usually be a factor between two and five.</para>
-->
  <para>根据使用的编译器和连接动态程序的 C 语言库的版本的不同，文件的大小可能会有所不同，但是当比较带调试符号和不带调试符号的程序时，大小的差别可能在 2 ~ 5 倍。</para>

<!--E
  <para>Because most users will never use a debugger on their system software,
  a lot of disk space can be regained by removing these symbols. The next
  section shows how to strip all debugging symbols from the programs and
  libraries. Additional information on system optimization can be found at
  <ulink url="&hints-root;optimization.txt"/>.</para>
-->
  <para>由于大多数人都不会在系统软件上使用调试器，所以通过删除这些调试符号可以节省大量的空间。下一节将给您展示如何从程序和库文件中去除所有调试符号。关于系统优化的详细信息可以在 <ulink url="&hints-root;optimization.txt"/> 找到。</para>

</sect1>
