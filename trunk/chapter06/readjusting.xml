<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-readjusting">
  <?dbhtml filename="readjusting.html"?>

<!--E
  <title>Re-adjusting the Toolchain</title>
-->
  <title>再次调整工具链</title>
<!--E
  <para>Now that the final C libraries have been installed, it is time to adjust
  the toolchain again. The toolchain will be adjusted so that it will link any
  newly compiled program against these new libraries. This is a similar process
  used in the <quote>Adjusting</quote> phase in the beginning of <xref
  linkend="chapter-temporary-tools"/>, but with the adjustments reversed. In <xref
  linkend="chapter-temporary-tools"/>, the chain was guided from the host's
  <filename class="directory">/{,usr/}lib</filename> directories to the new
  <filename class="directory">/tools/lib</filename> directory. Now, the chain will
  be guided from that same <filename class="directory">/tools/lib</filename>
  directory to the LFS <filename class="directory">/{,usr/}lib</filename>
  directories.</para>
-->
  <para>现在，最终的 C 库已经安装好了，我们需要再次调整工具链，让本章随后编译的那些工具都连接到这个库上。基本上，就是把<xref linkend="chapter-temporary-tools"/>中"调整工具链"那里做的调整给取消掉。在<xref linkend="chapter-temporary-tools"/>中，工具链使用的库是从宿主系统的 <filename class="directory">/{,usr/}lib</filename> 转向新安装的 <filename class="directory">/tools/lib</filename> 目录。同样的，现在工具链使用的库将从临时的 <filename class="directory">/tools/lib</filename> 转向 LFS 系统最终的 <filename class="directory">/{,usr/}lib</filename> 目录.</para>
<!--E
  <para>First, backup the <filename class="directory">/tools</filename> linker,
  and replace it with the adjusted linker we made in chapter 5. We'll also create
  a link to its counterpart in <filename class="directory">/tools/$(gcc
  -dumpmachine)/bin</filename>:</para>
-->
  <para>首先，备份 <filename class="directory">/tools</filename> 下的链接，用我们在第五章中编译的链接器来替换，再创建一个链接到在 <filename class="directory">/tools/$(gcc -dumpmachine)/bin</filename> 中的复本。</para>

<screen><userinput>mv -v /tools/bin/{ld,ld-old}
mv -v /tools/$(gcc -dumpmachine)/bin/{ld,ld-old}
mv -v /tools/bin/{ld-new,ld}
ln -sv /tools/bin/ld /tools/$(gcc -dumpmachine)/bin/ld</userinput></screen>

<!--E
  <para>Next, amend the GCC specs file so that it points to the new
  dynamic linker, and so that GCC knows where to find the correct headers
  and Glibc start files. A <command>sed</command> command accomplishes
  this:</para>
-->

  <para>接下来，修正 GCC 的 specs 文件，使它指向新的动态链接器，这样 GCC 才能知道在哪能发现开始文件。应用一个 <command>sed</command> 命令：</para>
  <important>
<!--E
    <para>If working on a platform where the name of the dynamic linker is
    something other than <filename class="libraryfile">ld-linux.so.2</filename>,
    substitute <quote>ld-linux.so.2</quote> with the name of the platform's
    dynamic linker in the following commands. Refer to <xref
    linkend="ch-tools-toolchaintechnotes" role=","/> if necessary.</para>
-->
    <para>如果你的系统平台上，动态连接器的名字不是 <filename class="libraryfile">ld-linux.so.2</filename>，你必须把上面命令里的"ld-linux.so.2"换成你的系统平台上动态连接器的名字。若有必要，请参见 <xref linkend="ch-tools-toolchaintechnotes"/>。</para> 
  </important>

<screen><userinput>gcc -dumpspecs | sed \
    -e 's@/tools/lib/ld-linux.so.2@/lib/ld-linux.so.2@g' \
    -e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
    -e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' &gt; \
    `dirname $(gcc --print-libgcc-file-name)`/specs</userinput></screen>

<!--E
  <para>It is a good idea to visually inspect the specs file to verify the
  intended change was actually made.</para>
-->
  <para>修改之后，用你的眼睛亲自检查一下 specs 文件，确保已经改正确了。</para>

<!--E
  <para>It is imperative at this point to ensure that the basic
  functions (compiling and linking) of the adjusted toolchain are working
  as expected. To do this, perform the following sanity checks:</para>
-->
  <para>现在有必要停下来，检查一下新工具链的基本功能（编译和连接）是否正常，我们进行一个简单的合理性检查：</para>

<screen os="a"><userinput>echo 'main(){}' &gt; dummy.c
cc dummy.c -v -Wl,--verbose &amp;&gt; dummy.log
readelf -l a.out | grep ': /lib'</userinput></screen>

<!--E
  <para os="b">If everything is working correctly, there should be no errors,
  and the output of the last command will be (allowing for
  platform-specific differences in dynamic linker name):</para>
-->
  <para os="b">如果一切正常，应该不会出错，而且最后一个命令的结果应该是（某些特殊平台上动态连接器的名称可能与此处不同）：</para>

<screen os="c"><computeroutput>[Requesting program interpreter: /lib/ld-linux.so.2]</computeroutput></screen>

<!--E
  <para>Note that <filename class="directory">/lib</filename> is now
  the prefix of our dynamic linker.</para>
-->
  <para>注意，<filename class="directory">/lib</filename> 应该是动态连接器的前缀。</para>

<!--E
  <para os="d">Now make sure that we're setup to use the correct startfiles:</para>
-->
  <para os="d">现在确保我们设置使用正确的开始文件：</para>

<screen os="e"><userinput>grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log</userinput></screen>

<!--E
  <para os="f">If everything is working correctly, there should be no errors,
    and the output of the last command will be:</para>
-->
  <para os="f">如果一切正常，应该不会出错，而且最后一个命令的结果应该是：</para>

<screen><computeroutput>/usr/lib/crt1.o succeeded
/usr/lib/crti.o succeeded
/usr/lib/crtn.o succeeded</computeroutput></screen>

<!--E
  <para os="g">Verify that the compiler is searching for the correct header
  files:</para>
-->
  <para os="g">验证编译器可以搜索正确的头文件：</para>

<screen><userinput>grep -B1 '^ /usr/include' dummy.log</userinput></screen>

<!--E
  <para os="h">This command should return successfully with the following output:</para>
-->
  <para os="h">如果一切正常返回的结果应该是：</para>

<screen><computeroutput>#include &lt;...&gt; search starts here:
 /usr/include</computeroutput></screen>

<!--E
  <para os="i">Next, verify that the new linker is being used with the correct search paths:</para>
-->
  <para os="i">接下来要做的是验证新的链接器是否在正确的搜索路径内：</para>

<screen os="j"><userinput>grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'</userinput></screen>

<!--E
  <para os="k">If everything is working correctly, there should be no errors,
  and the output of the last command will be:</para>
-->
  <para os="k">如果一切正常，应该不会出错，而且最后一个命令的结果应该是：</para>

<screen><computeroutput>SEARCH_DIR("/tools/i686-pc-linux-gnu/lib")
SEARCH_DIR("/usr/lib")
SEARCH_DIR("/lib");</computeroutput></screen>

<!--E
  <para os="l">Next make sure that we're using the correct libc:</para>
-->
  <para os="l">下面，确保我们是否正在使用正确的 libc：</para>

<screen os="m"><userinput>grep "/lib/libc.so.6 " dummy.log</userinput></screen>

<!--E
  <para os="n">If everything is working correctly, there should be no errors,
  and the output of the last command will be:</para>
-->
  <para os="n">如果一切正常，应该不会出错，而且最后一个命令的结果应该是：</para>

<screen os="o"><computeroutput>attempt to open /lib/libc.so.6 succeeded</computeroutput></screen>

<!--E
  <para os="p">Lastly, make sure GCC is using the correct dynamic linker:</para>
-->
  <para os="p">最后，确保 GCC 正在使用正确的动态链接器：</para>
<screen os="q"><userinput>grep found dummy.log</userinput></screen>

<!--E
  <para os="r">If everything is working correctly, there should be no errors,
  and the output of the last command will be (allowing for
  platform-specific differences in dynamic linker name):</para>
-->
  <para os="r">如果一切正常，应该不会出错，而且最后一个命令的结果应该是（某些特殊平台上动态连接器的名称可能与此处不同）：</para>

<screen os="s"><computeroutput>found ld-linux.so.2 at /lib/ld-linux.so.2</computeroutput></screen>

<!--E
  <para os="t">If the output does not appear as shown above or is not received
  at all, then something is seriously wrong. Investigate and retrace the
  steps to find out where the problem is and correct it. The most likely
  reason is that something went wrong with the specs file adjustment. Any
  issues will need to be resolved before continuing on with the process.</para>
-->
  <para os="t">如果输出与上面不同或者没有输出，那么就有大问题了。你需要检查一下前面的操作，看看问题出在哪里，并改正过来。在改正之前，不要继续后面的部份，因为没什么意义。大多数情况下，出错都是因为上面的 specs 文件没改对。当然，如果你的平台上动态连接器的名字不是 ld-linux.so.2，上面的结果也会不同。在继续之前要解决所有的问题。</para>

<!--E
  <para os="u">Once everything is working correctly, clean up the test files:</para>
-->
  <para os="u">在确定一切正常后，删除测试文件：</para>

<screen os="v"><userinput>rm -v dummy.c a.out dummy.log</userinput></screen>

</sect1>
