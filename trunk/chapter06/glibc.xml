<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-glibc" role="wrap">
  <?dbhtml filename="glibc.html"?>

  <sect1info condition="script">
    <productname>glibc</productname>
    <productnumber>&glibc-version;</productnumber>
    <address>&glibc-url;</address>
  </sect1info>

  <title>Glibc-&glibc-version;</title>

  <indexterm zone="ch-system-glibc">
    <primary sortas="a-Glibc">Glibc</primary>
  </indexterm>

  <sect2 role="package">
    <title/>
<!--E
    <para>The Glibc package contains the main C library. This library provides
    the basic routines for allocating memory, searching directories, opening and
    closing files, reading and writing files, string handling, pattern matching,
    arithmetic, and so on.</para>
-->
    <para>Glibc 包含了主要的 C 语言库。这个库提供了基本例程，用于分配内存、搜索目录、打开关闭文件、读写文件、字串处理、模式匹配、数学计算等等。</para>
    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&glibc-ch6-sbu;</seg>
        <seg>&glibc-ch6-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
<!--E
    <title>Installation of Glibc</title>
-->
    <title>安装 Glibc</title>
    <note>
<!--E
      <para>Some packages outside of LFS suggest installing GNU libiconv in
      order to translate data from one encoding to another. The project's
      home page (<ulink url="http://www.gnu.org/software/libiconv/"/>) says
      <quote>This library provides an <function>iconv()</function>
      implementation, for use on systems which don't have one, or whose
      implementation cannot convert from/to Unicode.</quote> Glibc provides
      an <function>iconv()</function> implementation and can convert from/to
      Unicode, therefore libiconv is not required on an LFS system.</para>
-->
      <para>一些 LFS 基本系统之外的软件包建议安装 GNU libiconv 以使得数据够能在不同编码之间进行转换。GNU libiconv 项目的主页（<ulink url="http://www.gnu.org/software/libiconv/"/>）说："这个库为那些没有 <function>iconv()</function> 的系统或者虽然有 <function>iconv()</function> 却不能与 Unicode 相互转换的系统提供了一个能够与 Unicode 相互转换的实现"。Glibc 库中有一个 <function>iconv()</function>，并且能够与 Unicode 相互转换，因此，LFS 系统不需要 GNU libiconv 。</para>
    </note>
<!--E
    <para>The Glibc build system is self-contained and will install
    perfectly, even though the compiler specs file and linker are still
    pointing at <filename class="directory">/tools</filename>. The specs
    and linker cannot be adjusted before the Glibc install because the
    Glibc autoconf tests would give false results and defeat the goal
    of achieving a clean build.</para>
-->
    <para>Glibc 的编译系统是高度自给自足的，即使当前编译器 specs 文件和连接器还指向 <filename class="directory">/tools</filename> 目录，也能正确安装。我们在安装 Glibc 前不能调整 specs 文件和连接器，否则 Glibc 的 autoconf 测试会失败，从而妨碍我们创建一个干净系统的目标。</para>
    <!-- <para>The glibc-libidn tarball adds support for internationalized domain
    names (IDN) to Glibc. Many programs that support IDN require the full
    <filename class="libraryfile">libidn</filename> library, not this add-on (see
    <ulink url="&blfs-root;view/svn/general/libidn.html"/>).
    Unpack the tarball from within the Glibc source directory:</para>

<screen><userinput remap="pre">tar -xvf ../glibc-libidn-&glibc-version;.tar.bz2
mv glibc-libidn-&glibc-version; libidn</userinput></screen>-->
<!--E
    <para>In the vi_VN.TCVN locale, <command>bash</command> enters an infinite
    loop at startup. It is unknown whether this is a <command>bash</command>
    bug or a Glibc problem. Disable installation of this locale in order to
    avoid the problem:</para>
-->
    <para>在 vi_VN.TCVN locale 中，<command>bash</command> 一启动就进入无限循环当中。我们并不知道是 <command>bash</command> 中存在 bug 还是 Glibc 中有问题。所以，为了避免这个问题，我们不安装这个 locale。</para>
<screen><userinput remap="pre">sed -i '/vi_VN.TCVN/d' localedata/SUPPORTED</userinput></screen>

    <!-- <para>When running <command>make install</command>, a script called
    <filename>test-installation.pl</filename> performs a small sanity test on
    our newly installed Glibc. However, because our toolchain still points to
    the <filename class="directory">/tools</filename> directory, the sanity
    test would be carried out against the wrong Glibc. We can force the script
    to check the Glibc we have just installed with the following:</para>

<screen><userinput remap="pre">sed -i \
's|libs -o|libs -L/usr/lib -Wl,-dynamic-linker=/lib/ld-linux.so.2 -o|' \
        scripts/test-installation.pl</userinput></screen> -->
<!--E
    <para>First apply two patches which correct failures in the test
    suite:</para>
-->
    <para>首先，应用两个修正测试中错误的补丁包：</para>
<screen><userinput remap="pre">patch -Np1 -i ../&glibc-iconv-test-fixes-patch;
patch -Np1 -i ../&glibc-ildoubl-test-fix-patch;</userinput></screen>

<!--E
    <para>The <command>ldd</command> shell script contains Bash-specific
    syntax. Change its default program interpreter to <command>/bin/bash</command>
    in case another <command>/bin/sh</command> is installed as described in the
    <ulink url="&blfs-root;view/svn/postlfs/shells.html">Shells</ulink>
    chapter of the BLFS book:</para>
-->
    <para>在 <command>ldd</command> shell 脚本中包含了 Bash 特性的语句。在 BLFS <ulink url="&blfs-root;view/svn/postlfs/shells.html">Shells</ulink> 章节中描述到，将默认程序解释器设为 <command>/bin/bash</command> 以防止安装 <command>/bin/sh</command> 为程序解释器。</para>

<screen><userinput remap="pre">sed -i 's|@BASH@|/bin/bash|' elf/ldd.bash.in</userinput></screen>
<!--E
    <para>The Glibc documentation recommends building Glibc outside of the source
    directory in a dedicated build directory:</para>
-->
    <para>Glibc 文档推荐在源码目录之外的一个专门的编译目录下进行编译：</para>
<screen><userinput remap="pre">mkdir -v ../glibc-build
cd ../glibc-build</userinput></screen>
<!--E
    <para>Again, add the needed compiler flag to CFLAGS:</para>
-->
    <para>添加必须的编译器标志 CFLAGS：</para>
<screen><userinput remap="configure">echo "CFLAGS += -march=i486 -mtune=native" &gt; configparms</userinput></screen>
<!--E
    <para>Prepare Glibc for compilation:</para>
-->
    <para>为编译 Glibc 做准备：</para>
<screen><userinput remap="configure">../glibc-&glibc-version;/configure --prefix=/usr \
    --disable-profile --enable-add-ons \
    --enable-kernel=2.6.0 --libexecdir=/usr/lib/glibc</userinput></screen>

    <variablelist>
<!--E
      <title>The meaning of the new configure options:</title>
-->
      <title>新配置选项的含义：</title>
      <varlistentry>
        <term><parameter>--libexecdir=/usr/lib/glibc</parameter></term>
        <listitem>
<!--
          <para>This changes the location of the <command>pt_chown</command>
          program from its default of <filename
          class="directory">/usr/libexec</filename> to <filename
          class="directory">/usr/lib/glibc</filename>.</para>
-->
          <para>把 <command>pt_chown</command> 程序的位置从默认的 <filename class="directory">/usr/libexec</filename> 改为 <filename class="directory">/usr/lib/glibc</filename>。</para>
        </listitem>
      </varlistentry>

    </variablelist>
<!--E
    <para>Compile the package:</para>
-->
    <para>编译软件包：</para>
<screen><userinput remap="make">make</userinput></screen>

    <important>
<!--E
      <para>In this section, the test suite for Glibc is considered critical.
      Do not skip it under any circumstance.</para>
-->
      <para>本节的 Glibc 测试很重要。在任何情况下都不要省略这一步。</para>
    </important>
<!--E
    <para>Before running the tests, copy a file from the source tree into our
    build tree to prevent a couple of test failures, then test the
    results:</para>
-->
    <para>在运行测试之前，从源文件树拷贝一个文件到编译文件树中以防测试中出现一系列问题，然后再测试结果：</para>
<screen><userinput remap="test">cp -v ../glibc-&glibc-version;/iconvdata/gconv-modules iconvdata
make -k check 2&gt;&amp;1 | tee glibc-check-log
grep Error glibc-check-log</userinput></screen>
<!--E
    <para>You will probably see an expected (ignored) failure in the
    <emphasis>posix/annexc</emphasis> test.  In addition the Glibc test suite
    is somewhat dependent on the host system.  This is a list of the most
    common issues:</para>
-->
    <para>在 <emphasis>posix/annexc</emphasis> 中，你可能会看到一个预料的错误（可以忽略）。另外，在 Glibc 测试单元，测试结果多少会依赖于宿主系统。下面是一些常见的错误：</para>
    <itemizedlist>
      <!-- Check again after updating from gcc-4.1.x -->
      <listitem>
<!--E
        <para>The <emphasis>nptl/tst-cancel1</emphasis> test will fail when
        using the 4.1 series of GCC.</para>
-->
        <para>如果使用 4.1 版本的 GCC 那么在 <emphasis>nptl/tst-cancel1</emphasis> 中会显示失败。</para>
      </listitem>
      <!-- Was true in glibc-2.3.6 -->
      <listitem>
<!--E
        <para>The <emphasis>nptl/tst-clock2</emphasis> and
        <emphasis>tst-attr3</emphasis> tests sometimes
        fail.  The reason is not completely understood, but indications
        are that a heavy system load can trigger these failures.</para>
-->
        <para><emphasis>nptl/tst-clock2</emphasis> 和 <emphasis>tst-attr3</emphasis> 测试有时会出错。原因现在还不是很明白，可能是系统负载过重导致的。</para>
      </listitem>
      <listitem>
<!--E
        <para>The math tests sometimes fail when running on
        systems where the CPU is not a relatively new genuine Intel or
        authentic AMD processor.</para>
-->
        <para>math 测试在一些使用较老的 Intel 或 AMD 的系统上会失败，某些优化设置也会导致该测试失败。</para>
      </listitem>
      <listitem>
<!--E
        <para>If you have mounted the LFS partition with the
        <parameter>noatime</parameter> option, the <emphasis>atime</emphasis>
        test will fail. As mentioned in <xref linkend="space-mounting"/>, do not
        use the <parameter>noatime</parameter> option while building LFS.</para>
-->
        <para><emphasis>atime</emphasis> 会在使用 <parameter>noatime</parameter> 选项挂载 LFS 分区时失败（参见 <xref linkend="space-mounting"/>），在编译LFS过程中不要使用 <parameter>noatime</parameter> 选项。</para> 
      </listitem>
      <listitem>
<!--E
        <para>When running on older and slower hardware or on systems under
        load, some tests can fail because of test timeouts being exceeded.</para>
-->
        <para>在一些很老很慢的机器上，一些测试会由于超时而失败。</para>
      </listitem>
    </itemizedlist>
<!--E
    <para>Though it is a harmless message, the install stage of Glibc will
    complain about the absence of <filename>/etc/ld.so.conf</filename>.
    Prevent this warning with:</para>
-->
    <para>在安装 Glibc 的过程中，它会警告缺少 <filename>/etc/ld.so.conf</filename> 文件。其实这没什么关系，不过下面的命令能修正它：</para>

<screen><userinput remap="install">touch /etc/ld.so.conf</userinput></screen>
<!--E
    <para>Install the package:</para>
-->
    <para>安装软件包：</para>
<screen><userinput remap="install">make install</userinput></screen>
<!--E
    <para>The locales that can make the system respond in a different language
    were not installed by the above command. None of the locales are required,
    but if some of them are missing, testsuites of the future packages would
    skip important testcases.</para>
-->
    <para>locales 会让系统以一种上面命令没有安装语言的情况处理。要注意 locales 是必须的，如果他们中的一些丢失了，后面的测试单元会跳过重要测试。</para>
<!--E
    <para>Individual locales can be installed using the
    <command>localedef</command> program. E.g., the first
    <command>localedef</command> command below combines the
    <filename>/usr/share/i18n/locales/de_DE</filename>
    charset-independent locale definition with the
    <filename>/usr/share/i18n/charmaps/ISO-8859-1.gz</filename>
    charmap definition and appends the result to the
    <filename>/usr/lib/locale/locale-archive</filename> file.
    The following instructions will install the minimum set of
    locales necessary for the optimal coverage of tests:</para>
-->
    <para>单个的 locale 可以通过使用 <command>localedef</command> 程序来安装。例如，下面的第一个 <command>localedef</command> 命令将 <filename>/usr/share/i18n/locales/de_DE</filename> 跟 <filename>/usr/share/i18n/charmaps/ISO-8859-1.gz</filename> 结合，并添加到 <filename>/usr/lib/locale/locale-archive</filename> 文件中。下面的说明将会安装一个所需 locale 的最小集合：</para>

<screen role="nodump"><userinput remap="locale-test">mkdir -pv /usr/lib/locale
localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i de_DE -f UTF-8 de_DE.UTF-8
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i en_US -f UTF-8 en_US.UTF-8
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fa_IR -f UTF-8 fa_IR
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i fr_FR -f UTF-8 fr_FR.UTF-8
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i ja_JP -f EUC-JP ja_JP
localedef -i tr_TR -f UTF-8 tr_TR.UTF-8</userinput></screen>
<!--E
    <para>In addition, install the locale for your own country, language and
    character set.</para>
-->
    <para>另外，你可以安装你的国家、语言和字符集所对应的 locale。</para>
<!--E
    <para>Alternatively, install all locales listed in the
    <filename>glibc-&glibc-version;/localedata/SUPPORTED</filename> file
    (it includes every locale listed above and many more) at once with the
    following time-consuming command:</para>
-->
    <para>当然，可以一次安装所有列在 <filename>glibc-&glibc-version;/localedata/SUPPORTED</filename> （目录里面包括所有的 locale）中的 locales，利用下面的命令：</para>
<screen><userinput remap="locale-full">make localedata/install-locales</userinput></screen>
<!--E
    <para>Then use the <command>localedef</command> command to create and
    install locales not listed in the
    <filename>glibc-&glibc-version;/localedata/SUPPORTED</filename> file
    in the unlikely case you need them.</para>
-->
    <para>接着使用 <command>localedef</command> 命令来创建和安装 locales 没有列在 <filename>glibc-&glibc-version;/localedata/SUPPORTED</filename> 中的（这种情况不太可能），如果你需要它们的话。</para>
    <!-- The Live CD patches the localedata/SUPPORTED file instead of
    running localedef, the results are equivalent -->

  </sect2>

  <sect2 id="conf-glibc" role="configuration">
<!--E
    <title>Configuring Glibc</title>
-->
    <title>配置 Glibc</title>

    <indexterm zone="conf-glibc">
      <primary sortas="e-/etc/nsswitch.conf">/etc/nsswitch.conf</primary>
    </indexterm>

    <indexterm zone="conf-glibc">
      <primary sortas="e-/etc/localtime">/etc/localtime</primary>
    </indexterm>
<!--E
    <para>The <filename>/etc/nsswitch.conf</filename> file needs to be created
    because, although Glibc provides defaults when this file is missing or corrupt,
    the Glibc defaults do not work well in a networked environment. The time zone
    also needs to be configured.</para>
-->
    <para>我们需要建立 <filename>/etc/nsswitch.conf</filename> 文件。因为在这个文件丢失或不正确的情况下，Glibc 会使用默认配置，而 Glibc 的默认配置无法很好地在网络环境下工作。并且我们也需要设置自己的时区。</para>
<!--E
    <para>Create a new file <filename>/etc/nsswitch.conf</filename> by running the
    following:</para>
-->
    <para>使用如下命令建立一个新的 <filename>/etc/nsswitch.conf</filename> 文件：</para>
<screen><userinput>cat &gt; /etc/nsswitch.conf &lt;&lt; "EOF"
<literal># Begin /etc/nsswitch.conf

passwd: files
group: files
shadow: files

hosts: files dns
networks: files

protocols: files
services: files
ethers: files
rpc: files

# End /etc/nsswitch.conf</literal>
EOF</userinput></screen>
<!--E
    <para>One way to determine the local time zone, run the following
    script:</para>
-->
    <para>要想确定本地时区，可以使用下面的脚本：</para>
<screen role="nodump"><userinput>tzselect</userinput></screen>
<!--E
    <para>After answering a few questions about the location, the script will
    output the name of the time zone (e.g.,
    <emphasis>America/Edmonton</emphasis>). There are also some other possible
    timezones listed in <filename
    class='directory'>/usr/share/zoneinfo</filename> such as
    <emphasis>Canada/Eastern</emphasis> or <emphasis>EST5EDT</emphasis> that
    are not identified by the script but can be used.</para>
-->
    <para>按照顺序回答脚本运行过程中提出的几个问题后，脚本就会给出所需时区文件的位置（比如 <emphasis>America/Edmonton</emphasis>）。还有其他的一些时区列在 <filename class='directory'>/usr/share/zoneinfo</filename> ，比如 <emphasis>Canada/Eastern</emphasis> 或者 <emphasis>EST5EDT</emphasis>，这些虽然没有被脚本识别，但是都可以使用。</para>
<!--E
    <para>Then create the <filename>/etc/localtime</filename> file by
    running:</para>
-->
    <para>再用下列命令来创建 <filename>/etc/localtime</filename> 文件：</para>
<screen><userinput>cp -v --remove-destination /usr/share/zoneinfo/<replaceable>&lt;xxx&gt;</replaceable> \
    /etc/localtime</userinput></screen>
<!--
    <para>Replace <replaceable>&lt;xxx&gt;</replaceable> with the name of the
    time zone selected (e.g., Canada/Eastern).</para>
-->
    <para>将 &lt;xxx&gt; 替换成选择的时区的名称（比如 Canada/Eastern）。</para>
    <variablelist>
<!--E
      <title>The meaning of the cp option:</title>
-->
      <title>cp 命令选项的含义：</title>
      <varlistentry>
        <term><parameter>--remove-destination</parameter></term>
        <listitem>
<!--E
          <para>This is needed to force removal of the already existing symbolic
          link. The reason for copying the file instead of using a symlink is to
          cover the situation where <filename class="directory">/usr</filename>
          is on a separate partition. This could be important when booted into
          single user mode.</para>
-->
	  <para>强制删除已存在的符号链接。我们采用拷贝文件而不是创建符号链接的原因是：有可能 <filename class="directory">/usr</filename> 在单独的分区上，如果启动进入单用户模式，就会出问题。</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="conf-ld" role="configuration">
<!--E
    <title>Configuring the Dynamic Loader</title>
-->
    <title>配置动态链接库加载程序</title>
    <indexterm zone="conf-ld">
      <primary sortas="e-/etc/ld.so.conf">/etc/ld.so.conf</primary>
    </indexterm>
<!--E
    <para>By default, the dynamic loader (<filename
    class="libraryfile">/lib/ld-linux.so.2</filename>) searches through
    <filename class="directory">/lib</filename> and <filename
    class="directory">/usr/lib</filename> for dynamic libraries that are
    needed by programs as they are run. However, if there are libraries in
    directories other than <filename class="directory">/lib</filename> and
    <filename class="directory">/usr/lib</filename>, these need to be added
    to the <filename>/etc/ld.so.conf</filename> file in order for the
    dynamic loader to find them. Two directories that are commonly known
    to contain additional libraries are <filename
    class="directory">/usr/local/lib</filename> and <filename
    class="directory">/opt/lib</filename>, so add those directories to the
    dynamic loader's search path.</para>
-->
    <para>默认情况下，动态链接库加载程序（<filename class="libraryfile">/lib/ld-linux.so.2</filename>）搜索 <filename class="directory">/lib</filename> 和 <filename class="directory">/usr/lib</filename> 目录来寻找程序需要使用的动态连接库。但是，如果某些库在这两个目录之外，你就需要把它们的路径加到 <filename>/etc/ld.so.conf</filename> 文件里，以便动态链接库加载程序能够找到它们。<filename class="directory">/usr/local/lib</filename> 和 <filename class="directory">/opt/lib</filename> 是两个经常包含动态连接库但又不在默认目录中的目录，我们要把它们添加到动态链接库加载程序的搜索路径中。</para>
<!--E
    <para>Create a new file <filename>/etc/ld.so.conf</filename> by running the
    following:</para>
-->
    <para>使用如下命令创建新的 <filename>/etc/ld.so.conf</filename> 文件：</para>
<screen><userinput>cat &gt; /etc/ld.so.conf &lt;&lt; "EOF"
<literal># Begin /etc/ld.so.conf

/usr/local/lib
/opt/lib

# End /etc/ld.so.conf</literal>
EOF</userinput></screen>

  </sect2>

  <sect2 id="contents-glibc" role="content">
    <title>Contents of Glibc</title>

    <segmentedlist>
      <segtitle>Installed programs</segtitle>
      <segtitle>Installed libraries</segtitle>

      <seglistitem>
        <seg>catchsegv, gencat, getconf, getent, iconv, iconvconfig, ldconfig,
        ldd, lddlibc4, locale, localedef, mtrace, nscd, pcprofiledump,
        pt_chown, rpcgen, rpcinfo, sln, sprof, tzselect, xtrace,
        zdump, and zic</seg>
        <seg>ld.so, libBrokenLocale.{a,so}, libSegFault.so, libanl.{a,so},
        libbsd-compat.a, libc.{a,so}, libcidn.so, libcrypt.{a,so}, libdl.{a,so},
        libg.a, libieee.a, libm.{a,so}, libmcheck.a, libmemusage.so,
        libnsl.{a,so},  libnss_compat.so, libnss_dns.so, libnss_files.so,
        libnss_hesiod.so, libnss_nis.so, libnss_nisplus.so, libpcprofile.so,
        libpthread.{a,so}, libresolv.{a,so}, librpcsvc.a, librt.{a,so},
        libthread_db.so, and libutil.{a,so}</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="catchsegv">
        <term><command>catchsegv</command></term>
        <listitem>
          <para>Can be used to create a stack trace when a program
          terminates with a segmentation fault</para>
          <indexterm zone="ch-system-glibc catchsegv">
            <primary sortas="b-catchsegv">catchsegv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gencat">
        <term><command>gencat</command></term>
        <listitem>
          <para>Generates message catalogues</para>
          <indexterm zone="ch-system-glibc gencat">
            <primary sortas="b-gencat">gencat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getconf">
        <term><command>getconf</command></term>
        <listitem>
          <para>Displays the system configuration values for file system
          specific variables</para>
          <indexterm zone="ch-system-glibc getconf">
            <primary sortas="b-getconf">getconf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getent">
        <term><command>getent</command></term>
        <listitem>
          <para>Gets entries from an administrative database</para>
          <indexterm zone="ch-system-glibc getent">
            <primary sortas="b-getent">getent</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="iconv">
        <term><command>iconv</command></term>
        <listitem>
          <para>Performs character set conversion</para>
          <indexterm zone="ch-system-glibc iconv">
            <primary sortas="b-iconv">iconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="iconvconfig">
        <term><command>iconvconfig</command></term>
        <listitem>
          <para>Creates fastloading <command>iconv</command> module configuration
          files</para>
          <indexterm zone="ch-system-glibc iconvconfig">
            <primary sortas="b-iconvconfig">iconvconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ldconfig">
        <term><command>ldconfig</command></term>
        <listitem>
          <para>Configures the dynamic linker runtime bindings</para>
          <indexterm zone="ch-system-glibc ldconfig">
            <primary sortas="b-ldconfig">ldconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ldd">
        <term><command>ldd</command></term>
        <listitem>
          <para>Reports which shared libraries are required
          by each given program or shared library</para>
          <indexterm zone="ch-system-glibc ldd">
            <primary sortas="b-ldd">ldd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lddlibc4">
        <term><command>lddlibc4</command></term>
        <listitem>
          <para>Assists <command>ldd</command> with object files</para>
          <indexterm zone="ch-system-glibc lddlibc4">
            <primary sortas="b-lddlibc4">lddlibc4</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="locale">
        <term><command>locale</command></term>
        <listitem>
          <para>Prints various information about the current locale</para>
          <indexterm zone="ch-system-glibc locale">
            <primary sortas="b-locale">locale</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="localedef">
        <term><command>localedef</command></term>
        <listitem>
          <para>Compiles locale specifications</para>
          <indexterm zone="ch-system-glibc localedef">
            <primary sortas="b-localedef">localedef</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mtrace">
        <term><command>mtrace</command></term>
        <listitem>
          <para>Reads and interprets a memory trace file and displays a summary
          in human-readable format</para>
          <indexterm zone="ch-system-glibc mtrace">
            <primary sortas="b-mtrace">mtrace</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nscd">
        <term><command>nscd</command></term>
        <listitem>
          <para>A daemon that provides a cache for the most common name
          service requests</para>
          <indexterm zone="ch-system-glibc nscd">
            <primary sortas="b-nscd">nscd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pcprofiledump">
        <term><command>pcprofiledump</command></term>
        <listitem>
          <para>Dumps information generated by PC profiling</para>
          <indexterm zone="ch-system-glibc pcprofiledump">
            <primary sortas="b-pcprofiledump">pcprofiledump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pt_chown">
        <term><command>pt_chown</command></term>
        <listitem>
          <para>A helper program for <command>grantpt</command> to set the owner,
          group and access permissions of a slave pseudo terminal</para>
          <indexterm zone="ch-system-glibc pt_chown">
            <primary sortas="b-pt_chown">pt_chown</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rpcgen">
        <term><command>rpcgen</command></term>
        <listitem>
          <para>Generates C code to implement the Remote Procedure Call (RPC)
          protocol</para>
          <indexterm zone="ch-system-glibc rpcgen">
            <primary sortas="b-rpcgen">rpcgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rpcinfo">
        <term><command>rpcinfo</command></term>
        <listitem>
          <para>Makes an RPC call to an RPC server</para>
          <indexterm zone="ch-system-glibc rpcinfo">
            <primary sortas="b-rpcinfo">rpcinfo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sln">
        <term><command>sln</command></term>
        <listitem>
          <para>A statically linked <command>ln</command> program</para>
          <indexterm zone="ch-system-glibc sln">
            <primary sortas="b-sln">sln</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sprof">
        <term><command>sprof</command></term>
        <listitem>
          <para>Reads and displays shared object profiling data</para>
          <indexterm zone="ch-system-glibc sprof">
            <primary sortas="b-sprof">sprof</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tzselect">
        <term><command>tzselect</command></term>
        <listitem>
          <para>Asks the user about the location of the system and reports
          the corresponding time zone description</para>
          <indexterm zone="ch-system-glibc tzselect">
            <primary sortas="b-tzselect">tzselect</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xtrace">
        <term><command>xtrace</command></term>
        <listitem>
          <para>Traces the execution of a program by printing the currently
          executed function</para>
          <indexterm zone="ch-system-glibc xtrace">
            <primary sortas="b-xtrace">xtrace</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zdump">
        <term><command>zdump</command></term>
        <listitem>
          <para>The time zone dumper</para>
          <indexterm zone="ch-system-glibc zdump">
            <primary sortas="b-zdump">zdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zic">
        <term><command>zic</command></term>
        <listitem>
          <para>The time zone compiler</para>
          <indexterm zone="ch-system-glibc zic">
            <primary sortas="b-zic">zic</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ld.so">
        <term><filename class="libraryfile">ld.so</filename></term>
        <listitem>
          <para>The helper program for shared library executables</para>
          <indexterm zone="ch-system-glibc ld.so">
            <primary sortas="c-ld.so">ld.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libBrokenLocale">
        <term><filename class="libraryfile">libBrokenLocale</filename></term>
        <listitem>
          <para>Used internally by Glibc as a gross hack to get broken programs
          (e.g., some Motif applications) running. See comments in
          <filename>glibc-&glibc-version;/locale/broken_cur_max.c</filename>
          for more information</para>
          <indexterm zone="ch-system-glibc libBrokenLocale">
            <primary sortas="c-libBrokenLocale">libBrokenLocale</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libSegFault">
        <term><filename class="libraryfile">libSegFault</filename></term>
        <listitem>
          <para>The segmentation fault signal handler, used by
          <command>catchsegv</command></para>
          <indexterm zone="ch-system-glibc libSegFault">
            <primary sortas="c-libSegFault">libSegFault</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libanl">
        <term><filename class="libraryfile">libanl</filename></term>
        <listitem>
          <para>An asynchronous name lookup library</para>
          <indexterm zone="ch-system-glibc libanl">
            <primary sortas="c-libanl">libanl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libbsd-compat">
        <term><filename class="libraryfile">libbsd-compat</filename></term>
        <listitem>
          <para>Provides the portability needed in order to run certain
          Berkeley Software Distribution (BSD) programs under Linux</para>
          <indexterm zone="ch-system-glibc libbsd-compat">
            <primary sortas="c-libbsd-compat">libbsd-compat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libc">
        <term><filename class="libraryfile">libc</filename></term>
        <listitem>
          <para>The main C library</para>
          <indexterm zone="ch-system-glibc libc">
            <primary sortas="c-libc">libc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcidn">
        <term><filename class="libraryfile">libcidn</filename></term>
        <listitem>
          <para>Used internally by Glibc for handling internationalized domain
          names in the <function>getaddrinfo()</function> function</para>
          <indexterm zone="ch-system-glibc libcrypt">
            <primary sortas="c-libcrypt">libcrypt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcrypt">
        <term><filename class="libraryfile">libcrypt</filename></term>
        <listitem>
          <para>The cryptography library</para>
          <indexterm zone="ch-system-glibc libcrypt">
            <primary sortas="c-libcrypt">libcrypt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libdl">
        <term><filename class="libraryfile">libdl</filename></term>
        <listitem>
          <para>The dynamic linking interface library</para>
          <indexterm zone="ch-system-glibc libdl">
            <primary sortas="c-libdl">libdl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libg">
        <term><filename class="libraryfile">libg</filename></term>
        <listitem>
          <para>Dummy library containing no functions. Previously was a runtime
          library for <command>g++</command></para>
          <indexterm zone="ch-system-glibc libg">
            <primary sortas="c-libg">libg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libieee">
        <term><filename class="libraryfile">libieee</filename></term>
        <listitem>
          <para>Linking in this module forces error handling rules for math
          functions as defined by the Institute of Electrical and Electronic
          Engineers (IEEE). The default is POSIX.1 error handling</para>
          <indexterm zone="ch-system-glibc libieee">
            <primary sortas="c-libieee">libieee</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libm">
        <term><filename class="libraryfile">libm</filename></term>
        <listitem>
          <para>The mathematical library</para>
          <indexterm zone="ch-system-glibc libm">
            <primary sortas="c-libm">libm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmcheck">
        <term><filename class="libraryfile">libmcheck</filename></term>
        <listitem>
          <para>Turns on memory allocation checking when linked to</para>
          <indexterm zone="ch-system-glibc libmcheck">
            <primary sortas="c-libmcheck">libmcheck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmemusage">
        <term><filename class="libraryfile">libmemusage</filename></term>
        <listitem>
          <para>Used by <command>memusage</command> to help collect
          information about the memory usage of a program</para>
          <indexterm zone="ch-system-glibc libmemusage">
            <primary sortas="c-libmemusage">libmemusage</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnsl">
        <term><filename class="libraryfile">libnsl</filename></term>
        <listitem>
          <para>The network services library</para>
          <indexterm zone="ch-system-glibc libnsl">
            <primary sortas="c-libnsl">libnsl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnss">
        <term><filename class="libraryfile">libnss</filename></term>
        <listitem>
          <para>The Name Service Switch libraries, containing functions for
          resolving host names, user names, group names, aliases, services,
          protocols, etc.</para>
          <indexterm zone="ch-system-glibc libnss">
            <primary sortas="c-libnss">libnss</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libpcprofile">
        <term><filename class="libraryfile">libpcprofile</filename></term>
        <listitem>
          <para>Contains profiling functions used to track the amount of CPU
          time spent in specific source code lines</para>
          <indexterm zone="ch-system-glibc libpcprofile">
            <primary sortas="c-libpcprofile">libpcprofile</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libpthread">
        <term><filename class="libraryfile">libpthread</filename></term>
        <listitem>
          <para>The POSIX threads library</para>
          <indexterm zone="ch-system-glibc libpthread">
            <primary sortas="c-libpthread">libpthread</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libresolv">
        <term><filename class="libraryfile">libresolv</filename></term>
        <listitem>
          <para>Contains functions for creating, sending, and interpreting
          packets to the Internet domain name servers</para>
          <indexterm zone="ch-system-glibc libresolv">
            <primary sortas="c-libresolv">libresolv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="librpcsvc">
        <term><filename class="libraryfile">librpcsvc</filename></term>
        <listitem>
          <para>Contains functions providing miscellaneous RPC services</para>
          <indexterm zone="ch-system-glibc librpcsvc">
            <primary sortas="c-librpcsvc">librpcsvc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="librt">
        <term><filename class="libraryfile">librt</filename></term>
        <listitem>
          <para>Contains functions providing most of the interfaces specified
          by the POSIX.1b Realtime Extension</para>
          <indexterm zone="ch-system-glibc librt">
            <primary sortas="c-librt">librt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libthread_db">
        <term><filename class="libraryfile">libthread_db</filename></term>
        <listitem>
          <para>Contains functions useful for building debuggers for
          multi-threaded programs</para>
          <indexterm zone="ch-system-glibc libthread_db">
            <primary sortas="c-libthread_db">libthread_db</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libutil">
        <term><filename class="libraryfile">libutil</filename></term>
        <listitem>
          <para>Contains code for <quote>standard</quote> functions used in
          many different Unix utilities</para>
          <indexterm zone="ch-system-glibc libutil">
            <primary sortas="c-libutil">libutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
