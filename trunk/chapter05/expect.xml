<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-expect" role="wrap">
  <?dbhtml filename="expect.html"?>

  <sect1info condition="script">
    <productname>expect</productname>
    <productnumber>&expect-version;</productnumber>
    <address>&expect-url;</address>
  </sect1info>

  <title>Expect-&expect-version;</title>

  <indexterm zone="ch-tools-expect">
    <primary sortas="a-Expect">Expect</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

<!--E
    <para>The Expect package contains a program for carrying out scripted
    dialogues with other interactive programs.</para>
-->
    <para>Expect 提供了一个与其他交互式程序提供脚本接口的工具。</para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&expect-ch5-sbu;</seg>
        <seg>&expect-ch5-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
<!--E
    <title>Installation of Expect</title>
-->
    <title>安装 Expect</title>

<!--E
    <para>First, fix a bug that can result in false failures during the GCC test
    suite run:</para>
-->
    <para>首先修正一个导致运行 GCC 测试程序失败的 bug：</para>

<screen><userinput remap="pre">patch -Np1 -i ../&expect-spawn-patch;</userinput></screen>

<!--E
    <para>Next, fix a bug that is a result of recent Tcl changes:</para>
-->
    <para>接着修正由于近期 Tcl 更新产生的 bug：</para>

<screen><userinput remap="pre">patch -Np1 -i ../&expect-tcl-patch;</userinput></screen>

<!--E
    <para>Next, force Expect's configure script to use <filename>/bin/stty</filename>
    instead of a <filename>/usr/local/bin/stty</filename> it may find on the host system.
    This will ensure that our testsuite tools remain sane for the final builds of our
    toolchain:</para>
-->
    <para>接下来，强制 Expect 配置脚本使用 <filename>/bin/stty</filename>，而不是使用可能在宿主系统中的 <filename>/usr/local/bin/stty</filename>。这保证我们的测试套件对于最终构造的工具链仍然稳健。</para>

<screen><userinput remap="pre">cp -v configure{,.orig}
sed 's:/usr/local/bin:/bin:' configure.orig &gt; configure</userinput></screen>

<!--E
    <para>Now prepare Expect for compilation:</para>
-->
    <para>现在可以准备编译：</para>

<screen><userinput remap="configure">./configure --prefix=/tools --with-tcl=/tools/lib \
  --with-tclinclude=/tools/include --with-x=no</userinput></screen>

    <variablelist>
<!--E
      <title>The meaning of the configure options:</title>
-->
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter>--with-tcl=/tools/lib</parameter></term>
        <listitem>
<!--E
          <para>This ensures that the configure script finds the Tcl
          installation in the temporary tools location instead of possibly
          locating an existing one on the host system.</para>
-->
          <para>这能确保配置脚本能找到临时系统目录下安装的 Tcl，而不是宿主系统可能安装的。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-tclinclude=/tools/include</parameter></term>
        <listitem>
<!--E
          <para>This explicitly tells Expect where to find Tcl's internal
          headers. Using this option avoids conditions where
          <command>configure</command> fails because it cannot automatically
          discover the location of Tcl's headers.</para>
-->
          <para>这明确指出了 Tcl 内部头文件的位置。这能防止由于 <command>configure</command> 不能自动寻找到 Tcl 内部头文件导致的配置失败。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-x=no</parameter></term>
        <listitem>
<!--E
          <para>This tells the configure script not to search for Tk (the
          Tcl GUI component) or the X Window System libraries, both of which
          may reside on the host system but will not exist in the temporary
          environment.</para>
-->
          <para>告诉配置脚本不去搜索 Tk （Tcl 的图形界面组件）或 X Window 系统库，两者可能存在于宿主系统，但在临时环境中不存在。</para>
        </listitem>
      </varlistentry>

    </variablelist>

<!--E
    <para>Build the package:</para>
-->
    <para>编译它：</para>

<screen><userinput remap="make">make</userinput></screen>

<!--E
    <para>Compilation is now complete. As discussed earlier, running the test
    suite is not mandatory for the temporary tools here in this chapter. To run
    the Expect test suite anyway, issue the following command:</para>
-->
    <para>编译完成之后，如前所述，在本章为了一个临时工具运行测试程序不是强制的。如果要测试 Expect，运行下面命令：</para>

<screen><userinput remap="test">make test</userinput></screen>

<!--E
    <para>Note that the Expect test suite is known to experience failures under
    certain host conditions that are not within our control. Therefore,
    test suite failures here are not surprising and are not considered
    critical.</para>
-->
    <para>请注意，已知 Expect 的测试程序会在某些不在我们控制范围内的宿主系统下出现测试失败。因此，测试失败也并不奇怪，这不是关键所在。</para>

<!--E
    <para>Install the package:</para>
-->
    <para>安装软件包：</para>

<screen><userinput remap="install">make SCRIPTS="" install</userinput></screen>

    <variablelist>
<!--E
      <title>The meaning of the make parameter:</title>
-->
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter>SCRIPTS=""</parameter></term>
        <listitem>
<!--E
          <para>This prevents installation of the supplementary Expect
          scripts, which are not needed.</para>
-->
          <para>这个选项防止安装 Expect 补充的一些并不需要的脚本。</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="contents-expect" role="content">
<!--E
    <title>Contents of Expect</title>
-->
    <title>Expect 的内容</title>

    <segmentedlist>
<!--E
      <segtitle>Installed program</segtitle>
      <segtitle>Installed library</segtitle>
-->
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>expect</seg>
        <seg>libexpect-&expect-lib-version;.a</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
<!--E
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
-->
      <bridgehead renderas="sect3">简单描述</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="expect">
        <term><command>expect</command></term>
        <listitem>
<!--E
          <para>Communicates with other interactive programs according
          to a script</para>
-->
          <para>按照一个脚本与其它交互式程序通信。</para>
          <indexterm zone="ch-tools-expect expect">
            <primary sortas="b-expect">expect</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libexpect">
        <term><filename class="libraryfile">libexpect-&expect-lib-version;.a</filename></term>
        <listitem>
<!--E
          <para>Contains functions that allow Expect to be used as a Tcl
          extension or to be used directly from C or C++ (without Tcl)</para>
-->
          <para>此库文件包含的函数可以让 Expert 作为一个 Tcl 扩展来使用，或直接被 C 或 C++使用（不通过 Tcl）。</para>
          <indexterm zone="ch-tools-expect libexpect">
            <primary sortas="c-libexpect-&expect-lib-version;">libexpect-&expect-lib-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
