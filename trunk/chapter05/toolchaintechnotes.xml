<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-toolchaintechnotes">
  <?dbhtml filename="toolchaintechnotes.html"?>

<!--E
  <title>Toolchain Technical Notes</title>
-->
  <title>工具链技术说明</title>

<!--E
  <para>This section explains some of the rationale and technical details
  behind the overall build method. It is not essential to immediately
  understand everything in this section. Most of this information will be
  clearer after performing an actual build. This section can be referred
  back to at any time during the process.</para>
-->
  <para>本节阐述了整个构建方法的一些基本原理和技术细节，您不必马上就理解本节中的所有内容。在您实际操作之后，就会了解大多数的东西，您可以在任何时候回顾本节。</para>

<!--E
  <para>The overall goal of <xref linkend="chapter-temporary-tools"/> is to
  provide a temporary environment that can be chrooted into and from which can be
  produced a clean, trouble-free build of the target LFS system in <xref
  linkend="chapter-building-system"/>. Along the way, we separate the new system
  from the host system as much as possible, and in doing so, build a
  self-contained and self-hosted toolchain. It should be noted that the build
  process has been designed to minimize the risks for new readers and provide
  maximum educational value at the same time.</para>
-->
  <para><xref linkend="chapter-temporary-tools"/> 的总体目标是提供一个临时环境，您可以 chroot 到这个环境，在里面构建一个<xref linkend="chapter-building-system"/>中的干净、没有问题的目标 LFS 系统。为了尽量的与宿主系统分开，我们一步步创建了一个自包含、自依赖的工具链。要注意的是，这个创建过程被设计为尽量减少新手犯错误的可能，同时尽可能多的提供教育价值。</para>

  <important>
<!--E
    <para>Before continuing, be aware of the name of the working platform,
    often referred to as the target triplet. Many times, the target
    triplet will probably be <emphasis>i686-pc-linux-gnu</emphasis>. A
    simple way to determine the name of the target triplet is to run the
    <command>config.guess</command> script that comes with the source for
    many packages. Unpack the Binutils sources and run the script:
    <userinput>./config.guess</userinput> and note the output.</para>
-->
    <para>在继续之前，要先知道工作平台的名称，就是所谓的目标三元组（<quote>target triplet</quote>）。通常情况下，目标三元组可能是 <emphasis>i686-pc-linux-gnu</emphasis>。确定该名字的简单办法就是运行许多源码包中都含有的 <command>config.guess</command>脚本，解压 Binutils 包运行 <userinput>./config.guess</userinput> 并注意输出结果。</para>

<!--E
    <para>Also be aware of the name of the platform's dynamic linker, often
    referred to as the dynamic loader (not to be confused with the standard
    linker <command>ld</command> that is part of Binutils). The dynamic linker
    provided by Glibc finds and loads the shared libraries needed by a program,
    prepares the program to run, and then runs it. The name of the dynamic
    linker will usually be <filename class="libraryfile">ld-linux.so.2</filename>.
    On platforms that are less prevalent, the name might be <filename
    class="libraryfile">ld.so.1</filename>, and newer 64 bit platforms might
    be named something else entirely. The name of the platform's dynamic linker
    can be determined by looking in the <filename class="directory">/lib</filename>
    directory on the host system. A sure-fire way to determine the name is to
    inspect a random binary from the host system by running:
    <userinput>readelf -l &lt;name of binary&gt; | grep interpreter</userinput>
    and noting the output. The authoritative reference covering all platforms
    is in the <filename>shlib-versions</filename> file in the root of the Glibc
    source tree.</para>
-->
    <para>另外，注意工作平台的动态连接器名称，通常指的是动态加载器（不要与 Binutils 里面的标准连接器 <command>ld</command> 相混淆）。动态连接器由 Glibc 提供，用来找到并加载一个程序运行时所需的共享库，在做好程序运行的准备之后，运行这个程序。动态连接器的名称通常是 <filename class="libraryfile">ld-linux.so.2</filename>。在不怎么流行的平台上则可能是 <filename class="libraryfile">ld.so.1</filename>，而在新的 64 位平台上更可能是别的完全不同的名称。通过查看宿主系统的 <filename class="directory">/lib</filename> 目录可以确定动态连接器的名字。确定这个名称还有一个必杀技，就是在宿主系统上随便找一个二进制文件，运行 <userinput>readelf -l &lt;name of binary&gt; | grep interpreter</userinput> 并查看输出的内容。涵盖所有平台的权威参考请查看 Glibc 源码根目录里的 <filename>shlib-versions</filename> 文件。</para>
  </important>

<!--E
  <para>Some key technical points of how the <xref
  linkend="chapter-temporary-tools"/> build method works:</para>
-->
  <para><xref linkend="chapter-temporary-tools"/>中构建方法是如何工作的一些技术要点：</para>

  <itemizedlist>
    <listitem>
<!--E
      <para>The process is similar in principle to cross-compiling, whereby
      tools installed in the same prefix work in cooperation, and thus utilize
      a little GNU <quote>magic</quote></para>
-->
      <para>这个过程在原理上与交叉编译类似，通过安装在同一个目录的工具的协同工作。还利用了一点 GNU 的<quote>魔术</quote>。</para>
    </listitem>
    <listitem>
<!--E
      <para>Careful manipulation of the standard linker's library search path
      ensures programs are linked only against chosen libraries</para>
-->
      <para>小心处理标准连接器的库文件搜索路径，确保程序仅连接到指定的库上。</para>
    </listitem>
    <listitem>
<!--E
      <para>Careful manipulation of <command>gcc</command>'s
      <filename>specs</filename> file tells the compiler which target dynamic
      linker will be used</para>
-->
      <para>小心处理 <command>gcc</command> 的 <filename>specs</filename> 文件，告诉编译器要使用哪个动态连接器。</para>
    </listitem>
  </itemizedlist>

<!--E
  <para>Binutils is installed first because the <command>configure</command>
  runs of both GCC and Glibc perform various feature tests on the assembler
  and linker to determine which software features to enable or disable. This
  is more important than one might first realize. An incorrectly configured
  GCC or Glibc can result in a subtly broken toolchain, where the impact of
  such breakage might not show up until near the end of the build of an
  entire distribution. A test suite failure will usually highlight this error
  before too much additional work is performed.</para>
-->
  <para>首先安装的是 Binutils ，因为 GCC 和 Glibc 的 <command>configure</command> 脚本要在汇编器和连接器上执行各种各样的特性测试，以确定软件的哪些功能要启用或禁用。这样做比你想像的还要重要，配置不正确的 GCC 或者 Glibc 会导致工具链出现微妙的错误，这样的错误造成的影响可能直到整个系统快要编译完成的时候才显现出来。测试程序通常会在其它的许多工作进行之前给出错误警告 (以避免其后的无效劳动)。</para>

<!--E
  <para>Binutils installs its assembler and linker in two locations,
  <filename class="directory">/tools/bin</filename> and <filename
  class="directory">/tools/$TARGET_TRIPLET/bin</filename>. The tools in one
  location are hard linked to the other. An important facet of the linker is
  its library search order. Detailed information can be obtained from
  <command>ld</command> by passing it the <parameter>&hyphen;-verbose</parameter>
  flag. For example, an <userinput>ld &hyphen;-verbose | grep SEARCH</userinput>
  will illustrate the current search paths and their order. It shows which
  files are linked by <command>ld</command> by compiling a dummy program and
  passing the <parameter>&hyphen;-verbose</parameter> switch to the linker. For example,
  <userinput>gcc dummy.c -Wl,&hyphen;-verbose 2&gt;&amp;1 | grep succeeded</userinput>
  will show all the files successfully opened during the linking.</para>
-->
  <para>Binutils 的汇编器和连接器安装在两个位置： <filename class="directory">/tools/bin</filename> 和 <filename class="directory">/tools/$TARGET_TRIPLET/bin</filename>。其中一个程序是另外一个的硬连接。连接器的一个重要方面是它的库搜索顺序，将 <parameter>--verbose</parameter> 选项传递给 <command>ld</command> 可以获得详细的信息。比如：<userinput>ld --verbose | grep SEARCH</userinput> 将显示当前搜索路径和顺序。要显示 <command>ld</command> 连接的是哪个文件，可以编译一个伪(dummy )程序并把 <parameter>--verbose</parameter> 传递给连接器。例如：<userinput>gcc dummy.c -Wl,--verbose 2&gt;&amp;1 | grep succeeded</userinput> 将显示所有连接成功的文件。</para>

<!--E
  <para>The next package installed is GCC. An example of what can be
  seen during its run of <command>configure</command> is:</para>
-->
  <para>接下来安装的是 GCC 。下面是运行 GCC 的 <command>configure</command> 脚本时，输出内容的一个实例：</para>

<screen><computeroutput>checking what assembler to use...
        /tools/i686-pc-linux-gnu/bin/as
checking what linker to use... /tools/i686-pc-linux-gnu/bin/ld</computeroutput></screen>

<!--E
  <para>This is important for the reasons mentioned above. It also demonstrates
  that GCC's configure script does not search the PATH directories to find which
  tools to use. However, during the actual operation of <command>gcc</command>
  itself, the same search paths are not necessarily used. To find out which
  standard linker <command>gcc</command> will use, run:
  <userinput>gcc -print-prog-name=ld</userinput>.</para>
-->
  <para>基于上面提到过的原因，这是重要的步骤，它同时证明了 GCC 的配置脚本并不是搜索 PATH 里的目录来寻找要使用哪个工具的，而且在 <command>gcc</command> 的实际操作中也不一定会使用相同的搜索路径。想要知道 <command>gcc</command> 将会使用哪个标准连接器，请运行 <userinput>gcc -print-prog-name=ld</userinput>。</para>

<!--E
  <para>Detailed information can be obtained from <command>gcc</command> by
  passing it the <parameter>-v</parameter> command line option while compiling
  a dummy program. For example, <userinput>gcc -v dummy.c</userinput> will show
  detailed information about the preprocessor, compilation, and assembly stages,
  including <command>gcc</command>'s included search paths and their order.</para>
-->
  <para>通过在编译一个伪(dummy)程序传递参数 <parameter>-v</parameter> 给 <command>gcc</command> 可以获得详细的信息。举例来说，<command>gcc -v dummy.c</command>将会给出在预处理，编译和汇编各个阶段的详细信息，包括 <command>gcc</command> 包含的搜索路径及其顺序。</para>

<!--E
  <para>The next package installed is Glibc. The most important considerations
  for building Glibc are the compiler, binary tools, and kernel headers. The
  compiler is generally not an issue since Glibc will always use the
  <command>gcc</command> found in a <envar>PATH</envar> directory. The binary
  tools and kernel headers can be a bit more complicated. Therefore, take no
  risks and use the available configure switches to enforce the correct
  selections. After the run of <command>configure</command>, check the contents
  of the <filename>config.make</filename> file in the <filename
  class="directory">glibc-build</filename> directory for all important details.
  Note the use of <parameter>CC="gcc -B/tools/bin/"</parameter> to control which
  binary tools are used and the use of the <parameter>-nostdinc</parameter>
  and <parameter>-isystem</parameter> flags to control the compiler's include
  search path. These items highlight an important aspect of the Glibc
  package&mdash;it is very self-sufficient in terms of its build machinery and
  generally does not rely on toolchain defaults.</para>
-->
  <para>下一个安装的包是 Glibc。编译 Glibc 的时候，最需要注意的地方是编译器、二进制工具(Binutils)和内核头文件。编译器一般不是问题，因为 Glibc 总是使用在 <envar>PATH</envar> 目录里找到的 <command>gcc</command>。二进制工具和和内核头文件要复杂点。因此，为慎重起见，明确使用配置开关(选项)来强制进行正确的选择。在运行 <command>configure</command> 脚本之后，检查在 <filename class="directory">glibc-build</filename> 目录下的 <filename>config.make</filename> 文件，注意所有重要的细节信息。<parameter>CC="gcc -B/tools/bin/"</parameter> 控制着使用哪一个二进制工具，而用选项 <parameter>-nostdinc</parameter> 和 <parameter>-isystem</parameter> 来控制编译器的库文件的搜索路径。这些说明了 Glibc 的一个重要方面—在编译方法上它是高度自给自足的，通常不依赖于工具链的默认值。</para>

<!--E
  <para>After the Glibc installation, make some adjustments to ensure that
  searching and linking take place only within the <filename
  class="directory">/tools</filename> prefix.  Install an adjusted
  <command>ld</command>, which has a hard-wired search path limited to
  <filename class="directory">/tools/lib</filename>. Then amend
  <command>gcc</command>'s specs file to point to the new dynamic linker in
  <filename class="directory">/tools/lib</filename>. This last step is vital
  to the whole process. As mentioned above, a hard-wired path to a dynamic
  linker is embedded into every Executable and Link Format (ELF)-shared
  executable.  This can be inspected by running:
  <userinput>readelf -l &lt;name of binary&gt; | grep interpreter</userinput>.
  Amending gcc's specs file ensures that every program compiled from here
  through the end of this chapter will use the new dynamic linker in
  <filename class="directory">/tools/lib</filename>.</para>
-->
  <para>在安装完 Glibc 之后，需要做一些调整来保证 <filename class="directory">/tools</filename> 是唯一的搜索和连接路径。安装一个调整好的 <command>ld</command> 它的硬链接搜索路径限制在 <filename class="directory">/tools/lib</filename>。接下来修正 <command>gcc</command> 的 specs 文件，使它指向新的位于 <filename class="directory">/tools/lib</filename> 的动态连接器。最后一步对于整个过程至关重要，正如先前提及的，指向动态连接器的硬链接路径被嵌入到每个共享 ELF 可执行文件里。这可以通过 <userinput>readelf -l &lt;name of binary&gt; | grep interpreter</userinput> 来查看。修正 gcc 的 specs 文件确保了现在开始到本章结束编译的所有程序都会使用位于 <filename class="directory">/tools/lib</filename> 下的新动态连接器。</para>

<!--E
  <para>For the second pass of GCC, its sources also need to be modified
  to tell GCC to use the new dynamic linker. Failure to do
  so will result in the GCC programs themselves having the name of the
  dynamic linker from the host system's <filename
  class="directory">/lib</filename> directory embedded into them, which
  would defeat the goal of getting away from the host.</para>
-->
  <para>在第二遍编译 GCC 时，也需要修改其源码使 GCC 使用新生成的动态连接器。不这样做的结果是 GCC 会把宿主系统 <filename class="directory">/lib</filename> 目录下动态连接器的名字嵌入进来，这样有悖于与宿主系统隔离的目标。</para>

<!--E
  <para>During the second pass of Binutils, we are able to utilize the
  <parameter>&hyphen;-with-lib-path</parameter> configure switch to control
  <command>ld</command>'s library search path.  From this point onwards,
  the core toolchain is self-contained and self-hosted. The remainder of
  the <xref linkend="chapter-temporary-tools"/> packages all build against
  the new Glibc in <filename class="directory">/tools</filename>.</para>
-->
  <para>在第二遍编译 Binutils 时，我们可以利用参数 <parameter>--with-lib-path</parameter> 来控制 <command>ld</command> 的库文件搜索路径。如前面所指出的，核心工具链是自给自足的，<xref linkend="chapter-temporary-tools"/>剩余部分的所有软件包在编译时都会使用位于 <filename class="directory">/tools</filename> 目录下的新 Glibc。</para>

<!--E
  <para>Upon entering the chroot environment in <xref
  linkend="chapter-building-system"/>, the first major package to be
  installed is Glibc, due to its self-sufficient nature mentioned above.
  Once this Glibc is installed into <filename
  class="directory">/usr</filename>, perform a quick changeover of the
  toolchain defaults, then proceed in building the rest of the target
  LFS system.</para>
-->
  <para>基于上述 Glibc 自给自足的特性，当我们进入 chroot 虚拟环境之后，在<xref linkend="chapter-building-system"/>中首先安装就是 Glibc。一旦安装好 Glibc 到 <filename class="directory">/usr</filename>，马上更改工具链的默认值，然后继续构建目标 LFS 系统的剩余部分。</para>

  <!-- FIXME: Removed as part of the fix for bug 1061 - we no longer build pass1
      packages statically, therefore this explanation isn't required

  <sect2>
  <title>Notes on Static Linking</title>

  <para>Besides their specific task, most programs have to perform many
  common and sometimes trivial operations. These include allocating
  memory, searching directories, reading and writing files, string
  handling, pattern matching, arithmetic, and other tasks. Instead of
  obliging each program to reinvent the wheel, the GNU system provides
  all these basic functions in ready-made libraries. The major library
  on any Linux system is Glibc.</para>

  <para>There are two primary ways of linking the functions from a
  library to a program that uses them&mdash;statically or dynamically. When
  a program is linked statically, the code of the used functions is
  included in the executable, resulting in a rather bulky program. When
  a program is dynamically linked, it includes a reference to the
  dynamic linker, the name of the library, and the name of the function,
  resulting in a much smaller executable. A third option is to use the
  programming interface of the dynamic linker (see <filename>dlopen(3)</filename>
  for more information).</para>

  <para>Dynamic linking is the default on Linux and has three major
  advantages over static linking. First, only one copy of the executable
  library code is needed on the hard disk, instead of having multiple
  copies of the same code included in several programs, thus saving
  disk space. Second, when several programs use the same library
  function at the same time, only one copy of the function's code is
  required in core, thus saving memory space. Third, when a library
  function gets a bug fixed or is otherwise improved, only the one
  library needs to be recompiled instead of recompiling all programs
  that make use of the improved function.</para>

  <para>If dynamic linking has several advantages, why then do we
  statically link the first two packages in this chapter? The reasons
  are threefold&mdash;historical, educational, and technical. The
  historical reason is that earlier versions of LFS statically linked
  every program in this chapter. Educationally, knowing the difference
  between static and dynamic linking is useful. The technical benefit is
  a gained element of independence from the host, meaning that those
  programs can be used independently of the host system. However, it is
  worth noting that an overall successful LFS build can still be
  achieved when the first two packages are built dynamically.</para>

  </sect2>-->

</sect1>
