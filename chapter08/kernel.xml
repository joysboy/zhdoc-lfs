<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-bootable-kernel" role="wrap">
  <?dbhtml filename="kernel.html"?>

  <sect1info condition="script">
    <productname>linux</productname>
    <productnumber>&linux-version;</productnumber>
    <address>&linux-url;</address>
  </sect1info>

  <title>Linux-&linux-version;</title>

  <indexterm zone="ch-bootable-kernel">
    <primary sortas="a-Linux">Linux</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Linux 内核软件包包含内核源代码及其头文件。</para>
    <!--E
         <para> The Linux package contains the Linux kernel. </para>
    -->

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&linux-ch8-sbu;</seg>
        <seg>&linux-ch8-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">

    <title>安装 kernel</title>
    <!--E
         <title>Installation of the kernel</title>
    -->

    <para>编译内核包含几个步骤——配置、编译和安装。阅读内核源码树里的 <filename>README</filename> 文件可选择不同于本书的配置内核的其他方法。</para>
    <!--E
<para>Building the kernel involves a few steps—configuration, compilation, and installation. Read the README file in the kernel source tree for alternative methods to the way
this book configures the kernel.</para>
    -->	

    <para>运行下面的命令准备编译：</para>
	<!--E
          <para>Prepare for compilation by running the following command:</para>
	-->

<screen><userinput remap="pre">make mrproper</userinput></screen>

    <para>这样可确保内核树绝对干净。内核开放团队推荐每次编译内核之前都运行这个命令。不要指望解压后的源码树都是干净的。</para>
	<!--E
          <para>This ensures that the kernel tree is absolutely clean. The kernel team recommends that this command be issued prior to each kernel compilation. Do not rely on the
source tree being clean after un-tarring.</para>
	-->
    <!-- Support for compiling a keymap into the kernel is deliberately removed -->

    <para>配置内核通过一个菜单来驱动界面。BLFS 在 LFS 包之外有一些详细的有关内核配置要求的软件包，在 <ulink url="&blfs-root;view/svn/longindex.html#kernel-config-index"/>:</para>
	<!--E
          <para>Configure the kernel via a menu-driven interface. BLFS has some information regarding particular kernel configuration requirements of packages outside of LFS at <ulink url="&blfs-root;view/svn/longindex.html#kernel-config-index"/>:</para>
	-->

<screen role="nodump"><userinput>make LANG=<replaceable>&lt;host_LANG_value&gt;</replaceable> LC_ALL= menuconfig</userinput></screen>

    <variablelist>
      <title>编译参数的含义：</title>
	<!--E
          <para>The meaning of the make parameters:</para>
	-->

      <varlistentry>
        <term><parameter>LANG=&lt;host_LANG_value&gt; LC_ALL=</parameter></term>
        <listitem>
          <para>这建立了在主机上使用的本地设置。这需要一个适当的内核界面接口线来动用 UTF-8 的 linux 文本控制台。</para>
	<!--E
          <para>This establishes the locale setting to the one used on the host. This is needed for a proper menuconfig ncurses interface line drawing on UTF-8 linux text console.</para>
	-->

          <para>确保用你主机上变量 <envar>$LANG</envar> 的值来替换 <replaceable>&lt;host_LANG_value&gt;</replaceable>。如果未设置，你可以用主机上 <envar>$LC_ALL</envar> 或者 <envar>$LC_CTYPE</envar> 的值来替代它。</para>
	<!--E
          <para>Be sure to replace <replaceable>&lt;host_LANG_value&gt;</replaceable> by the value of the <envar>$LANG</envar> variable from your host. If not set, you could use instead the host's value of <envar>$LC_ALL</envar> or
<envar>$LC_CTYPE</envar>.</para>
	-->
        </listitem>
      </varlistentry>

    </variablelist>

    <para>在同样的情况下选择 <command>make oldconfig</command> 可能更合适。阅读 <filename>README</filename> 以获取更多信息。</para>
	<!--E
          <para>Alternatively, <command>make oldconfig</command> may be more appropriate in some situations. See the <filename>README</filename> file for more information.</para>
	-->

    <para>如果愿意，可以跳过内核配置，直接从主机系统（假定可用）复制内核配置文件 <filename>.config</filename>，解压到 <filename class="directory">linux-&linux-version;</filename> 目录下。然而，我们不推荐这种选择。通常探究所有配置菜单项并且从头创建内核配置更好。</para>
	<!--E
          <para>If desired, skip kernel configuration by copying the kernel config file, <filename>.config</filename>, from the host system (assuming it is available) to the unpacked <filename class="directory">linux-&linux-version;</filename>
directory. However, we do not recommend this option. It is often better to explore all the configuration menus and create the kernel configuration from scratch.</para>
	-->

    <para>编译内核镜像和模块：</para>
	<!--E
          <para>Compile the kernel image and modules:</para>
	-->

<screen><userinput remap="make">make</userinput></screen>

    <para>如果使用内核模块，可能需要 <filename>/etc/modprobe.conf</filename> 文件。有关模块和内核的配置信息可在 <xref linkend="ch-scripts-udev"/> 和 <filename class="directory">linux-&linux-version;/Documentation</filename> 目录中的内核文档中找到。同样，<filename>modprobe.conf(5)</filename> 可能也很重要。</para>
	<!--E
          <para>If using kernel modules, an <filename>/etc/modprobe.conf</filename> file may be needed. Information pertaining to modules and kernel configuration is located in <xref linkend="ch-scripts-udev"/> and in the kernel documentation in the <filename class="directory">linux-&linux-version;/Documentation</filename> directory. Also, <filename>modprobe.conf(5)</filename> may be of interest.</para>
	-->

    <para>如果内核配置使用模块，安装它们：</para>
	<!--E
          <para>Install the modules, if the kernel configuration uses them:</para>
	-->

<screen><userinput remap="install">make modules_install</userinput></screen>

    <para>内核编译完成后，为完成安装还需要额外的步凑。一些文件需要拷贝副本到 <filename class="directory">/boot</filename> 目录。</para>
	<!--E
          <para>After kernel compilation is complete, additional steps are required to complete the installation. Some files need to be copied to the filename class="directory">/boot</filename> directory.</para>
	-->

    <para>内核镜像的路径，根据平台的不同可能会改变。下面的命令假定架构在 x86 上：</para>
	<!--E
          <para>The path to the kernel image may vary depending on the platform being used. The following command assumes an x86 architecture:</para>
	-->

<screen><userinput remap="install">cp -v arch/x86/boot/bzImage /boot/lfskernel-&linux-version;</userinput></screen>

    <para><filename>System.map</filename> 是内核的一个符号文件。它映射每个内核 API 函数的入口，以及内核在运行中的数据结构地址。运行下面这个命令安装这个映射文件：</para>
	<!--E
          <para><filename>System.map</filename> is a symbol file for the kernel. It maps the function entry points of every function in the kernel API, as well as the addresses of the kernel data structures for
the running kernel. Issue the following command to install the map file:</para>
	-->

<screen><userinput remap="install">cp -v System.map /boot/System.map-&linux-version;</userinput></screen>

    <para>内核配置文件 <filename>.config</filename> 产生于步凑 <command>make menuconfig</command>，包含所有被编译的内核配置选项。保留这个文件以备将来参考是个好主意:</para>
	<!--E
          <para>The kernel configuration file <filename>.config</filename> produced by the <command>make menuconfig</command> step above contains all the configuration selections for the kernel that was just compiled. It
is a good idea to keep this file for future reference:</para>
	-->

<screen><userinput remap="install">cp -v .config /boot/config-&linux-version;</userinput></screen>

    <para>安装Linux内核文档：</para>
	<!--E
          <para>Install the documentation for the Linux kernel:</para>
	-->

<screen><userinput remap="install">install -d /usr/share/doc/linux-&linux-version;
cp -r Documentation/* /usr/share/doc/linux-&linux-version;</userinput></screen>

    <para>有一点重要提示，内核源码目录的所有者不是 <emphasis>root</emphasis>。只要是用 <emphasis>root</emphasis>（类似我们在 chroot 环境下做的）解压，无论他们在什么打包者的计算机上解压后的文件都有用户和组的 ID。对于其他安装包这通常不是问题因为源码树在安装后被移除了。但是，Linux 源码树通常保留很长时间。为此，无论包装者使用什么 ID，用户的 ID 仍然有可能被分配给机器上的某人。此人将拥有改写内核源码的权限。</para>
	<!--E
          <para>It is important to note that the files in the kernel source directory are not owned by <emphasis>root</emphasis>. Whenever a package is unpacked as user <emphasis>root</emphasis> (like we did inside chroot), the files have the user and group IDs of whatever they were on the packager's computer. This is usually not a problem for any other package to be installed because the source tree is removed after the installation. However, the Linux source tree is often retained for a long time. Because of this, there is a chance that whatever user ID the packager used will be assigned to somebody on the machine. That person would then have write access to the kernel source.</para>
	-->

    <para>如果要保留内核源码，在 <filename
    class="directory">linux-&linux-version;</filename> 目录下运行  <command>chown -R 0:0</command>，确保所有文件都属于 <emphasis>root</emphasis>。</para>
    <!--E
    <para>If the kernel source tree is going to be retained, run
    <command>chown -R 0:0</command> on the <filename
    class="directory">linux-&linux-version;</filename> directory to ensure
    all files are owned by user <emphasis>root</emphasis>.</para>
    -->

    <warning>
      <para>推荐一些内核文档创立一个指向内核源码目录的  <filename class="symlink">/usr/src/linux</filename> 链接，特别对 2.6 版本的内核。而在 LFS 系统上 <emphasis>不允许</emphasis>，它会导致你在完成 LFS 系统构建后，安装其它软件包时出现错误。</para>
    <!--E
      <para>Some kernel documentation recommends creating a symlink from
      <filename class="symlink">/usr/src/linux</filename> pointing to the kernel
      source directory.  This is specific to kernels prior to the 2.6 series and
      <emphasis>must not</emphasis> be created on an LFS system as it can cause
      problems for packages you may wish to build once your base LFS system is
      complete.</para>
    -->
    </warning>

    <warning>
      <para>系统  <filename class="directory">include</filename> 目录下的头文件应该  <emphasis>始终</emphasis> 基于 Glibc 编译后的版本。也就是和 Linux-Libc-Headers 相同。因此， <emphasis>决不要</emphasis> 替换内核头文件。</para>
    <!--E
      <para>The headers in the system's
      <filename class="directory">include</filename> directory should
      <emphasis>always</emphasis> be the ones against which Glibc was compiled,
      that is, the sanitised headers from this Linux kernel tarball.
      Therefore, they should <emphasis>never</emphasis> be replaced by either
      the raw kernel headers or any other kernel sanitized headers.</para>
    -->
    </warning>

  </sect2>

  <sect2 id="contents-kernel" role="content">
    <title>Linux 的内容</title>
    <!--E>
    <title>Contents of Linux</title>
    -->

    <segmentedlist>
      <segtitle>安装的文件</segtitle>
      <!--E
      <segtitle>Installed files</segtitle>
      -->

      <seglistitem>
<!--E
        <seg>config-&linux-version;, lfskernel-&linux-version;, and
        System.map-&linux-version;</seg>
-->
        <seg>config-&linux-version;，lfskernel-&linux-version; 和 System.map-&linux-version;</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要描述</bridgehead>
      <!--E
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      -->
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="config">
        <term><filename>config-&linux-version;</filename></term>
        <listitem>
          <para>包含所有内核配置选项</para>
          <!--E
          <para>Contains all the configuration selections for the kernel</para>
          --> 
          <indexterm zone="ch-bootable-kernel config">
            <primary sortas="e-/boot/config">/boot/config-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lfskernel">
        <term><filename>lfskernel-&linux-version;</filename></term>
        <listitem>
          <para>Linux 系统的引擎。当打开计算机时，内核是操作系统装载的第一部分。它检测并初始化所有的电脑硬件组件，然后将这些设备以文件树的形式存放使得其它软件可以访问，并且让 CPU 能够同时运行多个程序。</para>
          <indexterm zone="ch-bootable-kernel lfskernel">
            <primary sortas="b-lfskernel">lfskernel-&linux-version;</primary>
	<!--E
	<para>The engine of the Linux system. When turning on the computer,
          the kernel is the first part of the operating system that gets loaded.
          It detects and initializes all components of the computer's hardware,
          then makes these components available as a tree of files to the
          software and turns a single CPU into a multitasking machine capable
          of running scores of programs seemingly at the same time</para>
          <indexterm zone="ch-bootable-kernel lfskernel">
            <primary sortas="b-lfskernel">lfskernel-&linux-version;</primary>
	-->
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="System.map">
        <term><filename>System.map-&linux-version;</filename></term>
        <listitem>
          <para>显示地址和符号的文件；它映射内核里所有函数和数据结构的入口和地址。</para>
	<!--E	
          <para>A list of addresses and symbols; it maps the entry points and
          addresses of all the functions and data structures in the
          kernel</para>
        -->
          <indexterm zone="ch-bootable-kernel System.map">
            <primary sortas="e-/boot/System.map">/boot/System.map-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
