<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-gcc-pass2" role="wrap">
  <?dbhtml filename="gcc-pass2.html"?>

  <sect1info condition="script">
    <productname>gcc</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

<!--E
  <title>GCC-&gcc-version; - Pass 2</title>
-->
  <title>GCC-&gcc-version; - 第二遍</title>

  <indexterm zone="ch-tools-gcc-pass2">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>tools, pass 2</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2003/XInclude"
    href="../chapter06/gcc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-ch5p2-sbu;</seg>
        <seg>&gcc-ch5p2-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
<!--E
    <title>Re-installation of GCC</title>
-->
    <title>重新安装 GCC</title>

    <sidebar>
      <para>编译 GCC 的时间较长，可以在解压并给源代码打补丁后，从 <ulink url="ftp://10.1.10.8/incoming/linux2008"/> 下载已经编译好的数据，解压到目录 <filename class="directory">$LFS/sources</filename> 中，然后直接执行 <command>make install</command> 命令。</para>
    </sidebar>
<!--E
    <para>The tools required to test GCC and Binutils&mdash;Tcl, Expect
    and DejaGNU&mdash;are installed now. GCC and Binutils can now be
    rebuilt, linking them against the new Glibc and testing them properly
    (if running the test suites in this chapter). Please note that these
    test suites are highly dependent on properly functioning PTYs which
    are provided by the host. PTYs are most commonly implemented via the
    <systemitem class="filesystem">devpts</systemitem> file system. Check
    to see if the host system is set up correctly in this regard by
    performing a quick test:</para>
-->
    <para>用于测试 GCC 和 Binutils 的工具 &mdash; Tcl、Expect 以及 DejaGUN &mdash; 已经安装好了。现在可以重新安装 GCC 和 Binutils，将它们连接到新的Glibc上，并做相关的测试（如果做本章的测试）。请注意，这些测试套件严重依赖于正常运作的伪终端(PTY)，这些伪终端通常是由宿主系统的 devpts 文件系统提供。因此请运行下面的小测试，检查宿主系统的devpts文件系统是否设置正确：</para>

<screen><userinput remap="test">expect -c "spawn ls"</userinput></screen>

<!--E
    <para>The response might be:</para>
-->
    <para>如果得到这样的提示：</para>

<screen><computeroutput>The system has no more ptys.
Ask your system administrator to create more.</computeroutput></screen>

<!--E
    <para>If the above message is received, the host does not have its PTYs
    set up properly. In this case, there is no point in running the test
    suites for GCC and Binutils until this issue is resolved. Please consult
    the LFS FAQ at <ulink url="&lfs-root;/lfs/faq.html#no-ptys"/> for more
    information on how to get PTYs working.</para>
-->
    <para>说明宿主系统没有设置好 PTYs，这样做 GCC 和 Binutils 的测试就没有意义了。想要解决该问题请参阅 <ulink url="&lfs-root;/lfs/faq.html#no-ptys"/> 获取更多信息。</para>

<!--E
    <para>As previously explained in <xref linkend="ch-tools-adjusting"/>,
    under normal circumstances the GCC <command>fixincludes</command> script
    is run in order to fix potentially broken header files. As GCC-&gcc-version;
    and Glibc-&glibc-version; have already been installed at this point, and
    their respective header files are known to not require fixing, the
    <command>fixincludes</command> script is not required. As mentioned
    previously, the script may in fact pollute the build environment by
    installing fixed headers from the host system into GCC's private include
    directory. The running of the <command>fixincludes</command> script can
    be suppressed by issuing the following commands:</para>
-->
    <para>正如在前面<xref linkend="ch-tools-adjusting"/>里解释的，在一般情况下，GCC 会运行 fixincludes 脚本来修正可能存在问题的头文件。当 GCC-&gcc-version; 和 Glibc-&glibc-version; 都已经安装好的情况下，相应的头文件就不再需要修正了，也就不再需要 fixincludes 文件了。另外根据前面的说明，该脚本的运行会修正宿主系统中存在问题的头文件，并修正后安装 GCC 的专属头文件目录，这会影响编译环境。运行下面命令禁止 fixincludes 脚本运行：</para>

<screen><userinput remap="pre">cp -v gcc/Makefile.in{,.orig}
sed 's@\./fixinc\.sh@-c true@' gcc/Makefile.in.orig &gt; gcc/Makefile.in</userinput></screen>

<!--E
    <para>The bootstrap build performed in <xref linkend="ch-tools-gcc-pass1"/>
    built GCC with the <option>-fomit-frame-pointer</option> compiler flag.
    Non-bootstrap builds omit this flag by default, so apply the following
    <command>sed</command> to use it in order to ensure consistent compiler
    builds:</para>
-->
    <para>在<xref linkend="ch-tools-gcc-pass1"/>中，进行的 bootstrap 编译使用了 <option>-fomit-frame-pointer</option> 编译选项，而非 bootstrap 编译则默认忽略了该选项，所以需要使用下面的 <command>sed</command> 命令来确保在非 bootstrap 编译时也同样使用 <option>-fomit-frame-pointer</option> 选项，以保持编译的一致性：</para>

<screen><userinput remap="pre">cp -v gcc/Makefile.in{,.tmp}
sed 's/^XCFLAGS =$/&amp; -fomit-frame-pointer/' gcc/Makefile.in.tmp \
  &gt; gcc/Makefile.in</userinput></screen>

<!--E
    <para>The following command will change the location of GCC's default
    dynamic linker to use the one we installed in
    <filename class="directory">/tools</filename>. It also removes <filename
    class="directory">/usr/include</filename> from GCC's include search path.
    Doing this now rather than adjusting the specs file after installation
    ensures that the new dynamic linker is used during the actual build of
    GCC. That is, all of the binaries created during the build will link
    against the new Glibc. Issue:</para>
-->
    <para>下面的命令将会更改 GCC 使用的默认动态连接器的位置，让其使用我们安装在 <filename class="directory">/tools</filename> 目录下的。该命令还将 <filename class="directory">/usr/include</filename> 从 GCC 的头文件搜索路径中删除。现在做这个工作而不是在安装后调整 specs 文件，这保证了在实际编译 GCC 的过程中就使用新的动态连接器。也就是编译过程中生成的所有新的二进制文件都会连接到新的 Glibc。</para>

<screen><userinput remap="pre">for file in $(find gcc/config -name linux64.h -o -name linux.h)
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
  -e 's@/usr@/tools@g' $file.orig &gt; $file
  echo "
#undef STANDARD_INCLUDE_DIR
#define STANDARD_INCLUDE_DIR 0" &gt;&gt; $file
  touch $file.orig
done</userinput></screen>

<!--E
    <para>In case the above seems hard to follow, let's break it down a bit.
    First we find all the files under the gcc/config directory that are named
    either <filename>linux.h</filename> or <filename>linux64.h</filename>.
    For each file found, we copy it to a file of the same name but with an added
    suffix of <quote>.orig</quote>. Then the first sed expression prepends
    <quote>/tools</quote> to every instance of <quote>/lib/ld</quote>,
    <quote>/lib64/ld</quote> or <quote>/lib32/ld</quote>, while the second one
    replaces hard-coded instances of <quote>/usr</quote>. Then we add our define
    statements which alter the include search path to the end of the file. Finally,
    we use <command>touch</command> to update the timestamp on the copied files.
    When used in conjunction with <command>cp -u</command>, this prevents unexpected
    changes to the original files in case the command is inadvertently run twice.
    </para>
-->
    <para>如果觉得上面的太长，不好理解。我们分解开来解释，首先寻找 gcc/config 目录下的所有名为 <filename>linux.h</filename> 或 <filename>linux64.h</filename> 的文件，复制这些文件并改名，在其后面添加后缀<quote>.orig</quote>，第一个 sed 表达式在这些文件中的每一处 <quote>/lib/ld</quote>、<quote>/lib64/ld</quote> 或 <quote>/lib32/ld</quote> 前面添加 <quote>/tools</quote>。第二个表达式替换每一个硬编码的 <quote>/usr</quote>。接着，我们定义一个语句，将头文件搜索路径移动到文件的最后。最后，使用 <command>touch</command> 来更新复制文件的时间戳。由于可能运行多次，使用 <command>cp -u</command> 可以防止原来的文件被更改。</para>

<!--E
    <para>As in the first build of GCC it requires the GMP and MPFR packages.
    Unpack the tarballs and move them into the required directory names:</para>
-->
    <para>如同第一次一样，GCC 需要 GMP 和 MPFR 包，解压它们，改名并移动到所需的目录：</para>

<screen><userinput remap="pre">tar -jxf ../mpfr-&mpfr-version;.tar.bz2
mv mpfr-&mpfr-version; mpfr
tar -jxf ../gmp-&gmp-version;.tar.bz2
mv gmp-&gmp-version; gmp</userinput></screen>

<!--E
    <para>Create a separate build directory again:</para>
-->
    <para>按照 GCC 建议的那样，再次创建一个独立的编译目录：</para>

<screen><userinput remap="pre">mkdir -v ../gcc-build
cd ../gcc-build</userinput></screen>

<!--E
    <para>Before starting to build GCC, remember to unset any environment
    variables that override the default optimization flags.</para>
-->
    <para>在编译GCC之前记得，取消任何优化编译选项：</para>

<!--E
    <para>Now prepare GCC for compilation:</para>
-->
    <para>现在开始准备编译：</para>

<screen><userinput remap="configure">../gcc-&gcc-version;/configure --prefix=/tools \
    --with-local-prefix=/tools --enable-clocale=gnu \
    --enable-shared --enable-threads=posix \
    --enable-__cxa_atexit --enable-languages=c,c++ \
    --disable-libstdcxx-pch --disable-bootstrap</userinput></screen>

    <variablelist>
<!--E
      <title>The meaning of the new configure options:</title>
-->
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter>--enable-clocale=gnu</parameter></term>
        <listitem>
<!--E
          <para>This option ensures the correct locale model is selected
          for the C++ libraries under all circumstances. If the configure
          script finds the <emphasis>de_DE</emphasis> locale installed,
          it will select the correct gnu locale model. However, if the
          <emphasis>de_DE</emphasis> locale is not installed, there is the
          risk of building Application Binary Interface (ABI)-incompatible
          C++ libraries because the incorrect generic locale model may be
          selected.</para>
-->
          <para>该选项保证在任何情况下都会为 C++ 库选择正确的 locale 模块。如果配置脚本发现安装了 <emphasis>de_DE</emphasis> locale，它能选择正确的 gnu locale 模块，但是如果没有安装 <emphasis>de_DE</emphasis>，就会选择不正确的通用 locale 模块，这可能构建与应用程序二进制接口（ABI）不兼容的 C++ 库。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-threads=posix</parameter></term>
        <listitem>
<!--E
          <para>This enables C++ exception handling for multi-threaded code.</para>
-->
          <para>使 C++ 异常处理能处理多线程代码。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-__cxa_atexit</parameter></term>
        <listitem>
<!--E
          <para>This option allows use of <function>__cxa_atexit</function>,
          rather than <function>atexit</function>, to register C++ destructors
          for local statics and global objects. This option is essential for
          fully standards-compliant handling of destructors. It also affects
          the C++ ABI, and therefore results in C++ shared libraries and C++
          programs that are interoperable with other Linux distributions.</para>
-->
          <para>为本地静态和全局函数注册 C++ 析构函数时使用 <function>__cxa_atexit</function> 而不是 <function>atexit</function>，这是为了完全符合标准对析构函数的处理规定。这还会影响 C++ 的 ABI，从而使 C++ 共享库和 C++ 程序可以在其他 Linux 发行版中使用。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-languages=c,c++</parameter></term>
        <listitem>
<!--E
          <para>This option ensures that both the C and C++ compilers are
          built.</para>
-->
          <para>保证编译 C 和 C++ 的编译器。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-libstdcxx-pch</parameter></term>
        <listitem>
<!--E
          <para>Do not build the pre-compiled header (PCH) for
          <filename class="libraryfile">libstdc++</filename>. It takes up a
          lot of space, and we have no use for it.</para>
-->
          <para>不为 libstdc++ 构建预编译头文件（PCH），这会占用很多空间，但我们用不到它。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-bootstrap</parameter></term>
        <listitem>
<!--E
          <para>Bootstrapping the compiler is now the default for GCC. However,
          our build method should provide us with a solid compiler without the
          need to bootstrap each time.</para>
-->
          <para>GCC 默认采用 bootstrap 方法编译自身，但是我们已经能提供一个稳健的编译器，不需要每次都 bootstrap。</para>
        </listitem>
      </varlistentry>

    </variablelist>

<!--E
    <para>Compile the package:</para>
-->
    <para>编译软件包：</para>

<screen><userinput remap="make">make</userinput></screen>

<!--E
    <para>Compilation is now complete. As previously mentioned, running the test
    suites for the temporary tools compiled in this chapter is not mandatory.
    To run the GCC test suite anyway, use the following command:</para>
-->
    <para>现在编译完成了，如前所述，在本章为了一个临时工具运行测试程序不是强制的。如果想运行 GCC 的测试套件，使用下列命令：</para>

<screen><userinput remap="test">make -k check</userinput></screen>

<!--E
    <para>The <parameter>-k</parameter> flag is used to make the test suite run
    through to completion and not stop at the first failure. The GCC test
    suite is very comprehensive and is almost guaranteed to generate a few
    failures.</para>
-->
    <para>参数 <parameter>-k</parameter> 用来保证 GCC 在遇到错误时不会停下来，直到全部测试完成。GCC 的测试套件非常全面，几乎肯定会出些错误。</para>

<!--E
    <para>For a discussion of test failures that are of particular
    importance, please see <xref linkend="ch-system-gcc" role="."/></para>
-->
    <para>关于特别重要的测试的出错讨论，请参考<xref linkend="ch-system-gcc" role="."/>。</para>

<!--E
    <para>Install the package:</para>
-->
    <para>安装 GCC：</para>

<screen><userinput remap="install">make install</userinput></screen>

    <xi:include xmlns:xi="http://www.w3.org/2003/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(/sect1/caution[1])"/>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>Details on this package are located in
    <xref linkend="contents-gcc" role="."/></para>

  </sect2>

</sect1>
